Gleam is a type-safe and scalable language for the Erlang virtual machine and
JavaScript runtimes. Today Gleam [v1.11.0][release] has been published.

[release]: https://github.com/gleam-lang/gleam/releases/tag/v1.11.0

## 30% faster? Really?

The title of this article makes a bold claim: Gleam compiled to JavaScript
being 30% faster! Gleam doesn't add any additional runtime when compiling to
JavaScript, and the generated code is very much like the JavaScript a human
would write, so this is an accomplishment we're very happy with.

First, a benchmark. [Lustre](https://github.com/lustre-labs/lustre) is a
frontend web framework for Gleam, capable of both SPA style and LiveView
style functionality. It has a virtual DOM implementation with comparable
performance to established frameworks in other languages, such as React and Elm.
It is one of the most widely used Gleam packages, and certainly the most widely
used Gleam web framework.

Lustre's virtual DOM diffing is implemented in Gleam, so improving its
performance will benefit many Gleam users, and it will serve as a good
benchmark to demonstrate the improvements. The charts below show the number of
operations per second for diffing HTML tables of various sizes (higher is
better).

``` =html
<style>
h4 {
  margin-bottom: 0;
}
.bar-chart {
  margin-top: var(--gap-1);
}
@media (min-width: 960px) {
  h4 {
    width: 150px;
    text-align: right;
  }
  .bar-chart .label {
    flex-basis: 150px;
  }
}
</style>

<h4>10 rows</h4>
<ol class="bar-chart">
  <li> <span class="label"><code>v1.10.0</code></span> <div class="bar" style="flex-basis: max(calc((142285  / 208149) * 70%), 1px);" ></div> 142k </li>
  <li> <span class="label"><code>v1.11.0</code></span> <div class="bar" style="flex-basis: max(calc((208149  / 208149) * 70%), 1px);" ></div> 208k </li>
</ol>

<h4>100 rows</h4>
<ol class="bar-chart">
  <li> <span class="label"><code>v1.10.0</code></span> <div class="bar" style="flex-basis: max(calc((15927  / 21592) * 70%), 1px);" ></div> 15.9k </li>
  <li> <span class="label"><code>v1.11.0</code></span> <div class="bar" style="flex-basis: max(calc((21592 / 21592) * 70%), 1px);" ></div> 21.5k </li>
</ol>

<h4>1000 rows</h4>
<ol class="bar-chart">
  <li> <span class="label"><code>v1.10.0</code></span> <div class="bar" style="flex-basis: max(calc((1521 / 2126) * 70%), 1px);" ></div> 1.5k </li>
  <li> <span class="label"><code>v1.11.0</code></span> <div class="bar" style="flex-basis: max(calc((2126 / 2126) * 70%), 1px);" ></div> 2.1k </li>
</ol>
``` 

Without any modification to Lustre itself it has got 30% faster! All other
Gleam projects compiling to JavaScript can expect to similar performance
improvements, with greater improvements to projects with more complex pattern
matching.

## OK, how does it work?

Gleam has a single flow control construct, the case expression. It runs
top-to-bottom checking to see which of the given patterns match the value.

```gleam
pub fn greet(person: Person) -> String {
  case person {
    Teacher(students: [], ..) -> "Hello! No students today?"
    Student(name: "Daria", ..) -> "Hi Daria"
    Student(subject: "Physics", ..) -> "Don't be late for Physics"
    Teacher(name:, ..) | Student(name:, ..) -> "Hello, " <> name <> "!"
  }
}
```

Prior to this release, when compiling to JavaScript code results in `if else`
chain, as can be seen in the code below.

```js
export function greet(person) {
  if (isTeacher(person) && isEmpty(person.students)) {
    return "Hello! No students today?";
  } else if (isStudent(person) && person.name === "Daria") {
    return "Hi Daria";
  } else if (isStudent(person) && person.subject === "Physics") {
    return "Don't be late for Physics";
  } else if (isTeacher(person)) {
    return "Hello, " + person.name + "!";
  } else {
    return "Hello, " + person.name + "!";
  }
}
```

_Disclaimer: This code has been lightly edited for clarity, but all aspects
related to this implementation change remain the same._

This is very understandable and human looking code, but it's not as efficient
as possible. For example, if the value is a `Student` with a name other than
"Daria" and a subject other than "Physics" then the `isTeacher` and `isStudent`
functions are each called twice, resulting in wasted work.
Similar problems arise with other patterns, especially with the list type as it
would need to be traversed multiple times to check various elements within
them.

The new and improved approach is to transform the linear sequence of checks
into a _decision tree_, where each check is performed the minimum number of
times to find the matching clause as quickly as possible. This decision tree is
then compiled into a series of nested `if else` statements in JavaScript.

```js
export function greet(person) {
  if (isTeacher(person)) {
    if (isEmpty(person.students)) {
      return "Hello! No students today?";
    } else {
      return "Hello, " + person.name + "!";
    }
  } else {
    if (person.name === "Daria") {
      return "Hi Daria";
    } else {
      if (person.subject === "Physics") {
        return "Don't be late for Physics";
      } else {
        return "Hello, " + person.name + "!";
      }
    }
  }
}
```

This does result in a small increase in code size (up to 15% in our tests), but
the uniform nature of the extra code is well suited to compression, with
minification and brotli compression completely removing this extra size and
producing the same application bundle size as with previous Gleam versions.

We have only implemented this optimisation for the JavaScript target and not
the Erlang one as the Erlang Virtual machine implements this optimisation
itself! It is done for us automatically there.

As part of this work the compilers analysis of pattern matching was enhanced,
notably around bit-array patterns. It can now identify when a clause with a bit
array pattern is unreachable because it only matches values that a previous
clause also matches, such as the second clause here:

```gleam
case payload {
  <<first_byte, _:bits>> -> first_byte
  <<1, _:bits>> -> 1
  _ -> 0
}
```

Efficient compilation of pattern matching is a surprisingly challenging
problem, and we would not have had so much success without academic research on
the subject. In particular we would like to acknowledge ["How to compile pattern
matching"](https://julesjacobs.com/notes/patternmatching/patternmatching.pdf),
by Jules Jacobs and ["Efficient manipulation of binary data using pattern
matching"](https://user.it.uu.se/~kostis/Papers/JFP_06.pdf), by Per
Gustafsson and Konstantinos Sagonas. Thank you.

This is the culmination of work that was started before Gleam v1, and has been
desired for much longer. A huge thank you to [Giacomo Cavalieri](https://github.com/giacomocavalieri)
for this final piece.

But that's not all! There's lots more new things in this release. Let's take a
look.

## Testing with `assert`

Types and static analysis are wonderful tools to help you write code, but
you're always going to need to test programs to know they are working
correctly. Gleam the language historically doesn't have any built-in testing
functionality, so test libraries define assertion functions that can be used in
tests.

```gleam
pub fn hello_test() {
  telephone.ring()
  |> should.equal("Hello, Joe!")
}
```

This has worked well enough to be productive, but it's not the world-class
experience we want in Gleam. These assertion functions are just that: they are
functions. All they can do is take arguments and return values. They can't know
anything about the code that produced those arguments, or the context from
which they are being called. The debugging information that a Gleam test
framework can provide with this is quite limited to compared to other languages
that have either built-in assertion capabilities, a macro system, or other similar
features.

Gleam isn't a language about types, it's a language about productivity and
developer joy. This sub-par testing experience wasn't up to our high standards,
and with this release we've made a big step towards correcting that with the
addition of `assert`.


```gleam
pub fn hello_test() {
  assert telecom.ring() == "Hello, Joe!"
}
```

This new syntax panics if the given expression evaluates to `False`. What makes
it different to conditionally calling the existing `panic` syntax is that the
runtime error is annotated with information about the expression that evaluated
to `False`, so test frameworks can provide detailed debugging information in
the event of a test failure.

Here's the output that the `gleeunit` test framework will use. Other Gleam test
frameworks may go further with even better formats!

``` =html
<pre><code><span class="code-success">...............</span>
<span class="code-error"><b>assert</b></span> <span class="code-comment">test/my_app_test.gleam:215</span>
<span class="code-decoration"> test:</span> my_app_test.hello_test
<span class="code-decoration"> code:</span> assert telecom.ring() == "Hello, Joe!"
<span class="code-decoration"> left:</span> "Hello, Mike!"
<span class="code-decoration">right:</span> <span class="code-comment">literal</span>
<span class="code-decoration"> info:</span> Assertion failed.
<span class="code-success">..........</span>
<span class="code-error">25 tests, 1 failures</span>
</pre></code>
```

Note how the test framework has enough information to show the assertion code
as it was written in the source file, and can show the values for the left and
right of the `==` operator.

As well as operators it can also understand function calls and show what each
argument is.

``` =html
<pre><code><span class="code-success">........</span>
<span class="code-error"><b>assert</b></span> <span class="code-comment">test/my_app_test.gleam:353</span>
<span class="code-decoration"> test:</span> my_app_test.system_test
<span class="code-decoration"> code:</span> assert telecom.is_up(key, strict, 2025)
<span class="code-decoration">    0:</span> "My WIFI"
<span class="code-decoration">    1:</span> True
<span class="code-decoration">    2:</span> <span class="code-comment">literal</span>
<span class="code-decoration"> info:</span> My internet must always be up!
<span class="code-success">.................</span>
<span class="code-error">25 tests, 1 failures</span>
</pre></code>
```


In that example there was a custom assertion message, displayed under the
`info` key. This is provided the same way as custom messages for Gleam's `todo`
and `panic` syntaxes, using the `as` keyword.

```gleam
pub fn system_test() {
  let key = "My WIFI"
  let strict = True

  assert telecom.is_up(key, strict, 2025)
    as "My internet must always be up!"
}
```

Thank you [Surya Rose](https://github.com/GearsDatapacks) for this! It will
make a big difference to all Gleam programmers testing their programs.

## `gleam dev`

A Gleam application typically has two `main` functions, one in `src/` for
running the application, and one in `test/` for running the tests. The
application main function can be run with the console command `gleam run`, and
the test one with the command `gleam test`.
This is easy enough to understand, but what if you have some other code you
need to run in development? For example, if you're making a backend web
application you might want to have some extra code that configures a local
development database, or compiles some frontend assets. Where would you put the
code that does this?

This is development code that you do not want to ship to production (extra code
and dependencies is a potential security risk), and having code that can make
destructive changes to the database in production is an accident waiting to
happen!

The traditional wisdom is to put a new module and `main` function the `test/`
directory (as this code isn't included in production) and then to run it with
`gleam run --module $THE_MODULE`. Placing non-test code in a directory called
`test` isn't very intuitive, so it's not uncommon for people to place it in
`src` instead, resulting in development code and dependencies accidentally
being published.

This release adds a new source directory for development code, `dev/`. Code in
the `dev/` directory can import `src/` code and use development dependencies,
and the `$PACKAGENAME_dev` module's `main` function can be run with the new
`gleam dev` console command. This should hopefully be a more satisfying and
easy to understand system, preventing future mistakes.

Thank you [Surya Rose](https://github.com/GearsDatapacks)!

## Help with understanding immutability

Gleam is an immutable language, which means that values are not updated
in-place, instead new values are constructed from older values, with the
desired changes applied. If you are familiar with mutable languages this may
seem inefficient, but immutable languages apply some [clever
optimisations](https://en.wikipedia.org/wiki/Persistent_data_structure) to get
excellent performance and memory usage.

It's possible for people new to the immutable style to get confused,
accidentally discarding the new updated version of some data. For example:

```gleam
pub fn call_api(token: String) -> Response(String) {
  let req = sdk.new_api_request()
  request.set_header(req, "authentication", "Bearer " <> token)
  http_client.send(req)
}
```

Can you spot the bug?

The `set_header` function returns a new request value, but it is not assigned
to a variable, so the original request value without the `authentication`
header is sent instead. The bug is fixed by passing the output of each function
into the next one.

```gleam
pub fn call_api(token: String) -> Response(String) {
  sdk.new_api_request()
  |> request.set_header("authentication", "Bearer " <> token)
  |> http_client.send
}
```

To help avoid this mistake the compiler will now emit a warning when a function
without any side effects is called but the return value isn't used. For example
the following code:

```gleam
fn go() -> Int {
  add(1, 2)
  add(3, 4)
}
```

Will produce the following warning:


``` =html
<pre><code><b><span class="code-warning">warning</span>: Unused value</b>
<span class="code-decoration">    ┌─</span> /src/main.gleam:4:3
<span class="code-decoration">    │</span>
<span class="code-decoration">  4 │</span>   <span class="code-warning">add(1, 2)</span>
<span class="code-decoration">    │</span>   <span class="code-warning">^^^^^^^^^ This value is never used</span>

This expression computes a value without any side effects, but then the
value isn't used at all. You might want to assign it to a variable, or
delete the expression entirely if it's not needed.
</pre></code>
```

Thank you [Surya Rose](https://github.com/GearsDatapacks)!

## JavaScript bit array improvements

Gleam has a powerful literal syntax for constructing and parsing binary data, a
much loved feature common to BEAM languages. Gleam supports this syntax when
compiling to Erlang or to JavaScript, but some aspects of the syntax were not
yet usable on JavaScript. This release adds support for UTF-16 and UTF-32
encoded segments of data.

Thank you [Surya Rose](https://github.com/GearsDatapacks)!

## Playing nicely with POSIX

The Gleam build tool has a `gleam export erlang-shipment` command for compiling
and preparing a project for deployment to a server or similar. It includes a
script for starting the Erlang virtual machine and running the program, but
unfortunately it was written in a way that meant that the program would not
receive POSIX exit signals.

[Christopher De Vries](https://github.com/devries) has fixed this problem.
Thank you Christopher!

## Generated documentation improvements

When publishing a package to Hex, the BEAM ecosystem package repository, the
Gleam build tool will generate and upload HTML documentation for the code.

When generating documentation, the build tool now prints type variable using
the same names as were used in the source code, making it easier to understand
what these type parameters are. For example, previously this function would
have been rendered like this:

```gleam
pub fn from_list(entries: List(#(a, b))) -> Dict(a, b)
```

But now is rendered as the following:

```gleam
pub fn from_list(entries: List(#(key, value))) -> Dict(key, value)
```

Another area of the documentation that has been improved is how types imported
from other modules are displayed. These types are now displayed with their
module qualifiers, and hovering over them shows the full module name. For
example, this code:

```gleam
import gleam/dynamic/decode

pub fn something_decoder() -> decode.Decoder(Something) {
  ...
}
```

Will now generate the following documentation:

```gleam
pub fn something_decoder() -> decode.Decoder(Something)
```

Hovering over the `decode.Decoder` text will show the following:

```txt
gleam/dynamic/decode.{type Decoder}
```

Clicking on `decode.Decoder` will take you to the documentation for that type.

Thank you [Surya Rose](https://github.com/GearsDatapacks)!

## Yet more fault tolerance

Gleam's compiler implements _fault tolerant analysis_. This means that when
there is some error in the code that means it is invalid and cannot be compiled,
the compiler can still continue to analyse the code to the best of its ability,
ignoring the invalid parts. Because of this Gleam language server can have a
good understanding of the code and provide IDE feature even when the codebase is
in an invalid state.

This release makes the analysis of lists, tuples, negation operators, `panic`,
`echo` and `todo`, function parameters, and function labels fault tolerant.
We're covering all the last remaining little case to make the language server
information as fresh and accurate as possible!

Thank you [Giacomo Cavalieri](https://github.com/giacomocavalieri) and
[Surya Rose](https://github.com/GearsDatapacks)!

## Labels in inexhaustive case expression errors

Gleam has exhaustiveness checking. This means that pattern matching flow
control must handle all the possible values that the type being matched on
could be. If there are any clauses missing then the program is incomplete,
and the compiler will return a helpful error showing the missing patterns.

This error has been improved to include record field labels, as can be seen at
the bottom of this example:

``` =html
<pre><code><b><span class="code-error">Inexhaustive patterns</span>: Unused value</b>
<span class="code-decoration">  ┌─</span> /src/main.gleam:6:3
<span class="code-decoration">  │</span>
<span class="code-decoration">6 │</span> <span class="code-error">╭   case person {</span>
<span class="code-decoration">8 │</span> <span class="code-error">│     Teacher(name:) -&gt; io.println("Good morning!")</span>
<span class="code-decoration">7 │</span> <span class="code-error">│     Student(name: "Samara", age: 27) -&gt; io.println("Hello Samara!")</span>
<span class="code-decoration">9 │</span> <span class="code-error">│   }</span>
<span class="code-decoration">  │</span> <span class="code-error">╰───^</span>

This case expression does not have a pattern for all possible values. If it
is run on one of the values without a pattern then it will crash.

The missing patterns are:

    Student(name:, age:)
</pre></code>
```

This improvement has also upgraded the code action to add missing patterns to a
`case` expression, now when the missing clauses are added to the code they will
include record labels.

Thank you [Surya Rose](https://github.com/GearsDatapacks)!

## Fill labels code action for patterns

The language server has a code action for filling in possible labels for a
function or record. This can be a convenient time saver when writing code,
especially if you can't immediately remember what labels the arguments use.

This code action has been upgraded to also work with records in patterns. In
this code the `Person` record pattern is missing two of its fields, so running
the code action will add them for you.

```diff
pub type Person {
  Person(name: String, age: Int, job: String)
}

pub fn age(person: Person) {
- let Person(age:) = person
+ let Person(age:, name:, job:) = person
  age
}
```

Thank you [Surya Rose](https://github.com/GearsDatapacks)!

## Bit array truncation warning

The compiler now raises a warning when it can tell that an int segment
with a literal value is going to be truncated. This will help folks understand
a behaviour that may be unexpected.

``` =html
<pre><code><b><span class="code-warning">warning</span>: Truncated bit array segment</b>
<span class="code-decoration">    ┌─</span> /src/main.gleam:4:5
<span class="code-decoration">    │</span>
<span class="code-decoration">  4 │</span>   &lt;&lt;<span class="code-warning">258</span>&gt;&gt;
<span class="code-decoration">    │</span>     <span class="code-warning">^^^ You can safely replace this with 2</span>

This segment is 1 byte long, but 258 doesn't fit in that many bytes. It
would be truncated by taking its first byte, resulting in the value 2.
</pre></code>
```

Thank you [Giacomo Cavalieri](https://github.com/giacomocavalieri)!


## Better language server support for constants

Gleam's language server has historically been missing hover, autocompletion,
and go-to definition within constants. [Surya Rose](https://github.com/GearsDatapacks)
has corrected this by implementing these features. Thank you Surya!

## Generate function code action improvements

Gleam's language server has a code action for generating the outline of a
function that is used in the code but does not yet exist.

It has been upgraded to now choose better argument names based on the labels
and variables used. For example, if the code action is run on the
not-yet-defined function named `remove`:

```gleam
pub fn main() -> List(Int) {
  let list = [1, 2, 3]
  let number = 1
  remove(each: number, in: list)
//^^^^^^ This function doesn't exist yet!
}
```

The language server will then generate the outline of the missing function, and
the code will look like this:

```gleam
pub fn main() -> List(Int) {
  let list = [1, 2, 3]
  let number = 1
  remove(each: number, in: list)
}

fn remove(each number: Int, in list: List(Int)) -> List(Int) {
  todo
}
```

Thank you [Giacomo Cavalieri](https://github.com/giacomocavalieri)!

## Generate variant code action

The language server now provides a code action to automatically generate a new
custom type variant, similar to the generate function code action.

In this example the `UserPressedButton` variant does not exist, but the
compiler can tell from the way that it is used that if it did exist it would be
a variant of the `Msg` custom type.

```gleam
pub type Msg {
  ServerSentResponse(Json)
}

pub fn view() -> Element(Msg) {
  div([], [
    button([on_click(UserPressedButton)], [text("Press me!")])
    //               ^^^^^^^^^^^^^^^^^ This doesn't exist yet!
  ])
}
```

Triggering the code action on the `UserPressedButton` will add it to the `Msg`
type:

```diff
pub type Msg {
  ServerSentResponse(Json)
+ UserPressedButton(String)
}
```

The code action understood the code well enough to know that this new variant
holds a string value, as that is what the `on_click` function does with it in
this example. If the variant was used with labels then the labels would be
included in the definition also.

Thank you [Giacomo Cavalieri](https://github.com/giacomocavalieri)! Another
excellent code action for "top-down" style programmers.

## Remove unused imports code action improvements

For a long time the Gleam language server has included a code action for
removing unused imports, but it wouldn't work as well as desired for imports
that include unqualified types and values: they would still remain after
running the action.

```gleam
import a_module.{type Unused, unused, used}

pub fn main() {
  used
}
```

Triggering the code action will remove all unused types and values:

```gleam
import a_module.{used}

pub fn main() {
  used
}
```

Thank you [Giacomo Cavalieri](https://github.com/giacomocavalieri)!

## Windows ARM binaries

We provide precompiled executables for each Gleam release, supporting Windows,
macOS, and Linux. Gleam users and package management systems can download and use these
executables instead of compiling the Gleam project from scratch, which takes a
long time.

[Jonatan Männchen](https://github.com/maennchen) has added an ARM64 Windows
build. This is useful as ARM based development machines are becoming more and
more common. Thank you Jonatan!

## And the rest

And thank you to the bug fixers and experience polishers:
[Ariel Parker](https://github.com/arielherself),
[Giacomo Cavalieri](https://github.com/giacomocavalieri),
[Louis Pilfold](https://github.com/lpil), 
[Mathieu Darse](https://github.com/mdarse),
[Matias Carlander](https://github.com/matiascr),
[Samuel Cristobal](https://github.com/scristobal), and
[Surya Rose](https://github.com/GearsDatapacks).

For full details of the many fixes and improvements they've implemented see [the
changelog][changelog].

[changelog]: https://github.com/gleam-lang/gleam/blob/main/changelog/v1.11.md

## A call for support

Gleam is not owned by a corporation; instead it is entirely supported by
sponsors, most of which contribute between $5 and $20 USD per month, and Gleam
is my sole source of income.

We have made great progress towards our goal of being able to appropriately pay
the core team members, but we still have further to go. Please consider
supporting [the project][sponsor] or core team members 
[Giacomo Cavalieri](https://github.com/sponsors/giacomocavalieri) and
[Surya Rose](https://github.com/sponsors/GearsDatapacks) 
on GitHub Sponsors.

``` =html
<a class="sponsor-level0" href="https://github.com/sponsors/lpil" rel="noopener" target="_blank">
  <img src="/images/community/github.svg" alt="GitHub Sponsors" style="filter: invert(1)"/>
</a>
```

[sponsor]: https://github.com/sponsors/lpil

Thank you to all our sponsors! And especially our top sponsor: Lambda.

``` =html
<ul class="top-sponsors">
  <li>
    <a class="sponsor-level1" href="https://lambdaclass.com/" rel="noopener" target="_blank" >
      <img src="/images/sponsors/lambda-class-white.png" alt="Lambda Class">
    </a>
  </li>
</ul>
```

- [Aaron Gunderson](https://github.com/agundy)
- [Abel Jimenez](https://github.com/abeljim)
- [ad-ops](https://github.com/ad-ops)
- [Adam Brodzinski](https://github.com/AdamBrodzinski)
- [Adam Johnston](https://github.com/adjohnston)
- [Adam Wyłuda](https://github.com/adam-wyluda)
- [Adi Iyengar](https://github.com/thebugcatcher)
- [Adrian Mouat](https://github.com/amouat)
- [Ajit Krishna](https://github.com/JitPackJoyride)
- [Aleksei Gurianov](https://github.com/Guria)
- [Alembic](https://alembic.com.au)
- [Alex Houseago](https://github.com/ahouseago)
- [Alex Manning](https://github.com/rawhat)
- [Alex Viscreanu](https://github.com/aexvir)
- [Alexander Koutmos](https://github.com/akoutmos)
- [Alexander Stensrud](https://github.com/muonoum)
- [Alexandre Del Vecchio](https://github.com/defgenx)
- [Ameen Radwan](https://github.com/Acepie)
- [Andrea Bueide](https://github.com/abueide)
- [AndreHogberg](https://github.com/AndreHogberg)
- [Antharuu](https://github.com/antharuu)
- [Anthony Khong](https://github.com/anthony-khong)
- [Anthony Maxwell](https://github.com/Illbjorn)
- [Anthony Scotti](https://github.com/amscotti)
- [Arthur Weagel](https://github.com/aweagel)
- [Arya Irani](https://github.com/aryairani)
- [Azure Flash](https://github.com/azureflash)
- [Barry Moore](https://github.com/chiroptical)
- [Bartek Górny](https://github.com/bartekgorny)
- [Ben Martin](https://github.com/requestben)
- [Ben Marx](https://github.com/bgmarx)
- [Ben Myles](https://github.com/benmyles)
- [Benjamin Kane](https://github.com/bbkane)
- [Benjamin Moss](https://github.com/drteeth)
- [bgw](https://github.com/bgwdotdev)
- [Bjarte Aarmo Lund](https://github.com/bjartelund)
- [Bjoern Paschen](https://github.com/00bpa)
- [Brad Mehder](https://github.com/bmehder)
- [Brett Cannon](https://github.com/brettcannon)
- [Brett Kolodny](https://github.com/brettkolodny)
- [Brian Dawn](https://github.com/brian-dawn)
- [Brian Glusman](https://github.com/bglusman)
- [Bruce Williams](https://github.com/bruce)
- [Bruno Michel](https://github.com/nono)
- [bucsi](https://github.com/bucsi)
- [Cam Ray](https://github.com/camray)
- [Cameron Presley](https://github.com/cameronpresley)
- [Carlo Munguia](https://github.com/carlomunguia)
- [Carlos Saltos](https://github.com/csaltos)
- [Chad Selph](https://github.com/chadselph)
- [Charlie Duong](https://github.com/ctdio)
- [Charlie Govea](https://github.com/charlie-n01r)
- [Chew Choon Keat](https://github.com/choonkeat)
- [Chris Donnelly](https://github.com/ceedon)
- [Chris King](https://github.com/Morzaram)
- [Chris Lloyd](https://github.com/chrislloyd)
- [Chris Ohk](https://github.com/utilForever)
- [Chris Rybicki](https://github.com/Chriscbr)
- [Chris Vincent](https://github.com/cvincent)
- [Christopher David Shirk](https://github.com/christophershirk)
- [Christopher De Vries](https://github.com/devries)
- [Christopher Dieringer](https://github.com/cdaringe)
- [Christopher Jung](https://github.com/christopherhjung)
- [Christopher Keele](https://github.com/christhekeele)
- [CJ Salem](https://github.com/specialblend)
- [Clifford Anderson](https://github.com/CliffordAnderson)
- [Coder](https://github.com/coder)
- [Cole Lawrence](https://github.com/colelawrence)
- [Colin](https://github.com/insanitybit)
- [Comamoca](https://github.com/Comamoca)
- [Comet](https://github.com/comet-ml)
- [Constantin (Cleo) Winkler](https://github.com/Lucostus)
- [Corentin J.](https://github.com/jcorentin)
- [Daigo Shitara](https://github.com/sdaigo)
- [Damir Vandic](https://github.com/dvic)
- [Dan](https://github.com/d2718)
- [Dan Dresselhaus](https://github.com/ddresselhaus)
- [Dan Strong](https://github.com/strongoose)
- [Danielle Maywood](https://github.com/DanielleMaywood)
- [Danny Arnold](https://github.com/pinnet)
- [Danny Martini](https://github.com/despairblue)
- [David Bernheisel](https://github.com/dbernheisel)
- [David Cornu](https://github.com/davidcornu)
- [Dennis Dang](https://github.com/dangdennis)
- [dennistruemper](https://github.com/dennistruemper)
- [devinalvaro](https://github.com/devinalvaro)
- [Diemo Gebhardt](https://github.com/diemogebhardt)
- [DoctorCobweb](https://github.com/DoctorCobweb)
- [Donnie Flood](https://github.com/floodfx)
- [Dylan Anthony](https://github.com/dbanty)
- [Dylan Carlson](https://github.com/gdcrisp)
- [Ed Hinrichsen](https://github.com/edhinrichsen)
- [Edon Gashi](https://github.com/edongashi)
- [Eileen Noonan](https://github.com/enoonan)
- [eli](https://github.com/dropwhile)
- [elke](https://liberapay.com/ijomeli/)
- [Emma](https://github.com/Emma-Fuller)
- [EMR Technical Solutions](https://github.com/EMRTS)
- [Endo Shogo](https://github.com/yellowsman)
- [Eric Koslow](https://github.com/ekosz)
- [Erik Terpstra](https://github.com/eterps)
- [erikareads](https://liberapay.com/erikareads/)
- [ErikML](https://github.com/ErikML)
- [erlend-axelsson](https://github.com/erlend-axelsson)
- [Ernesto Malave](https://github.com/oberernst)
- [Ethan Olpin](https://github.com/EthanOlpin)
- [Evaldo Bratti](https://github.com/evaldobratti)
- [Evan Johnson](https://github.com/evanj2357)
- [evanasse](https://github.com/evanasse)
- [Fabrizio Damicelli](https://github.com/fabridamicelli)
- [Fede Esteban](https://github.com/fmesteban)
- [Felix](https://github.com/yerTools)
- [Fernando Farias](https://github.com/nandofarias)
- [Filip Figiel](https://github.com/ffigiel)
- [Florian Kraft](https://github.com/floriank)
- [Francis Hamel](https://github.com/francishamel)
- [frankwang](https://github.com/Frank-III)
- [G-J van Rooyen](https://github.com/gvrooyen)
- [Gabriel Vincent](https://github.com/gabrielvincent)
- [gamachexx](https://github.com/olgam4)
- [Gavin Panella](https://github.com/allenap)
- [Geir Arne Hjelle](https://github.com/gahjelle)
- [Georg Hartmann](https://github.com/brasilikum)
- [George](https://github.com/george-grec)
- [Georgi Martsenkov](https://github.com/gmartsenkov)
- [ggobbe](https://github.com/ggobbe)
- [Giacomo Cavalieri](https://github.com/giacomocavalieri)
- [Giovanni Kock Bonetti](https://github.com/giovannibonetti)
- [Graham Vasquez](https://github.com/GV14982)
- [Grant Everett](https://github.com/YoyoSaur)
- [Guilherme de Maio](https://github.com/nirev)
- [Guillaume Heu](https://github.com/guillheu)
- [Guillaume Hivert](https://github.com/ghivert)
- [Hammad Javed](https://github.com/hammad-r-javed)
- [Hannes Nevalainen](https://github.com/kwando)
- [Hannes Schnaitter](https://github.com/ildorn)
- [Hans Raaf](https://github.com/oderwat)
- [Hayleigh Thompson](https://github.com/hayleigh-dot-dev)
- [Hazel Bachrach](https://github.com/hibachrach)
- [Henning Dahlheim](https://github.com/hdahlheim)
- [Henrik Tudborg](https://github.com/tudborg)
- [Henry Warren](https://github.com/henrysdev)
- [Heyang Zhou](https://github.com/losfair)
- [Hubert Małkowski](https://github.com/hubertmalkowski)
- [Iain H](https://github.com/iainh)
- [Ian González](https://github.com/Ian-GL)
- [Ian M. Jones](https://github.com/ianmjones)
- [Igor Montagner](https://github.com/igordsm)
- [inoas](https://github.com/inoas)
- [Isaac](https://github.com/graphiteisaac)
- [Isaac Harris-Holt](https://github.com/isaacharrisholt)
- [Isaac McQueen](https://github.com/imcquee)
- [István Bozsó](https://github.com/bozso)
- [Ivar Vong](https://github.com/ivarvong)
- [Jacob Lamb](https://github.com/jacobdalamb)
- [Jake Cleary](https://github.com/jakecleary)
- [Jake Wood](https://github.com/jzwood)
- [Jakob Ladegaard Møller](https://github.com/jakob753951)
- [James Birtles](https://github.com/jamesbirtles)
- [James MacAulay](https://github.com/jamesmacaulay)
- [Jan Pieper](https://github.com/janpieper)
- [Jan Skriver Sørensen](https://github.com/monzool)
- [Jean Niklas L'orange](https://github.com/hypirion)
- [Jean-Adrien Ducastaing](https://github.com/MightyGoldenOctopus)
- [Jean-Luc Geering](https://github.com/jlgeering)
- [Jean-Marc QUERE](https://github.com/jihem)
- [Jen Stehlik](https://github.com/okkdev)
- [Jerred Shepherd](https://github.com/shepherdjerred)
- [jiangplus](https://github.com/jiangplus)
- [Jimpjorps™](https://github.com/hunkyjimpjorps)
- [Joey Kilpatrick](https://github.com/joeykilpatrick)
- [Joey Trapp](https://github.com/joeytrapp)
- [Johan Strand](https://github.com/johan-st)
- [John Björk](https://github.com/JohnBjrk)
- [John Pavlick](https://github.com/jmpavlick)
- [John Strunk](https://github.com/jrstrunk)
- [Jojor](https://github.com/xjojorx)
- [Jon Lambert](https://github.com/jonlambert)
- [Jonas E. P](https://github.com/igern)
- [Jonas Hedman Engström](https://github.com/JonasHedEng)
- [jooaf](https://github.com/jooaf)
- [Joseph Lozano](https://github.com/joseph-lozano)
- [Joshua Steele](https://github.com/joshocalico)
- [Julian Hirn](https://github.com/nineluj)
- [Julian Lukwata](https://liberapay.com/d2quadra/)
- [Julian Schurhammer](https://github.com/schurhammer)
- [Justin Lubin](https://github.com/justinlubin)
- [Jérôme Schaeffer](https://github.com/Neofox)
- [KamilaP](https://github.com/Kamila-P)
- [Kemp Brinson](https://github.com/jkbrinso)
- [Kero van Gelder](https://github.com/keroami)
- [Kevin Schweikert](https://github.com/kevinschweikert)
- [Kramer Hampton](https://github.com/hamptokr)
- [Kritsada Sunthornwutthikrai](https://github.com/Bearfinn)
- [Krzysztof Gasienica-Bednarz](https://github.com/krzysztofgb)
- [Leah Ulmschneider](https://github.com/leah-u)
- [Leandro Ostera](https://github.com/leostera)
- [Lee Jarvis](https://github.com/leejarvis)
- [Lennon Day-Reynolds](https://github.com/rcoder)
- [Leon Qadirie](https://github.com/leonqadirie)
- [Leonardo Donelli](https://github.com/LeartS)
- [Lexx](https://github.com/lexx27)
- [lidashuang](https://github.com/defp)
- [Lily Rose](https://github.com/LilyRose2798)
- [Lucas Pellegrinelli](https://github.com/lucaspellegrinelli)
- [Lukas Bjarre](https://github.com/lbjarre)
- [Luke Amdor](https://github.com/lamdor)
- [Luna](https://github.com/2kool4idkwhat)
- [Manuel Rubio](https://github.com/manuel-rubio)
- [Marcos](https://github.com/ideaMarcos)
- [marcusandre](https://github.com/marcusandre)
- [Mariano Uvalle](https://github.com/AYM1607)
- [Marius Kalvø](https://github.com/mariuskalvo)
- [Mark Dodwell](https://github.com/mkdynamic)
- [Mark Holmes](https://github.com/markholmes)
- [Mark Markaryan](https://github.com/markmark206)
- [Martin Janiczek](https://github.com/Janiczek)
- [Martin Poelstra](https://github.com/poelstra)
- [Martin Rechsteiner ](https://github.com/rechsteiner)
- [martonkaufmann](https://github.com/martonkaufmann)
- [Mat Warger](https://github.com/mwarger)
- [Matt Champagne](https://github.com/han-tyumi)
- [Matt Heise](https://github.com/mhheise)
- [Matt Mullenweg](https://github.com/m)
- [Matt Robinson](https://github.com/matthewrobinsondev)
- [Matt Savoia](https://github.com/matt-savvy)
- [Matt Van Horn](https://github.com/mattvanhorn)
- [Matthew Jackson](https://github.com/matthewj-dev)
- [Matthew Whitworth](https://github.com/mwhitworth)
- [Max McDonnell](https://github.com/maxmcd)
- [metame](https://github.com/metame)
- [METATEXX GmbH](https://github.com/metatexx)
- [Metin Emiroğlu](https://github.com/amiroff)
- [Michael Duffy](https://github.com/stunthamster)
- [Michael Jones](https://github.com/michaeljones)
- [Michael Mazurczak](https://github.com/monocursive)
- [Michael McClintock](https://github.com/mrmcc3)
- [Mikael Karlsson](https://github.com/karlsson)
- [Mike Roach](https://github.com/mroach)
- [Mikey J](https://liberapay.com/mikej/)
- [MoeDev](https://github.com/MoeDevelops)
- [MzRyuKa](https://github.com/rykawamu)
- [n8n - Workflow Automation](https://github.com/n8nio)
- [Natanael Sirqueira](https://github.com/natanaelsirqueira)
- [Nathaniel Knight](https://github.com/nathanielknight)
- [NFIBrokerage](https://github.com/NFIBrokerage)
- [Nick Chapman](https://github.com/nchapman)
- [Nick Reynolds](https://github.com/ndreynolds)
- [Nicklas Sindlev Andersen](https://github.com/NicklasXYZ)
- [NicoVIII](https://github.com/NicoVIII)
- [Niket Shah](https://github.com/mrniket)
- [Nikolai Steen Kjosnes](https://github.com/blink1415)
- [Ninaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa](https://github.com/ninanomenon)
- [NineFX](http://www.ninefx.com)
- [Nomio](https://github.com/nomio)
- [Ocean](https://github.com/oceanlewis)
- [Olaf Sebelin](https://github.com/osebelin)
- [OldhamMade](https://github.com/OldhamMade)
- [Oliver Medhurst](https://github.com/CanadaHonk)
- [Oliver Tosky](https://github.com/otosky)
- [ollie](https://github.com/nnuuvv)
- [optizio](https://github.com/optizio)
- [Patrick Wheeler](https://github.com/Davorak)
- [Paul Guse](https://github.com/pguse)
- [Pedro Correa](https://github.com/Tulkdan)
- [Pete Jodo](https://github.com/petejodo)
- [Peter Rice](https://github.com/pvsr)
- [Philpax](https://github.com/philpax)
- [Pierrot](https://github.com/pierrot-lc)
- [Qdentity](https://github.com/qdentity)
- [Race Williams](https://github.com/raquentin)
- [Rasmus](https://github.com/stoft)
- [Raúl Chouza ](https://github.com/chouzar)
- [re.natillas](https://github.com/renatillas)
- [Redmar Kerkhoff](https://github.com/redmar)
- [Reilly Tucker Siemens](https://github.com/reillysiemens)
- [Renato Massaro](https://github.com/renatomassaro)
- [Renovator](https://github.com/renovatorruler)
- [Richard Viney](https://github.com/richard-viney)
- [Rico Leuthold](https://github.com/rico)
- [Rintaro Okamura](https://github.com/rinx)
- [Ripta Pasay](https://github.com/ripta)
- [Robert Attard](https://github.com/TanklesXL)
- [Robert Ellen](https://github.com/rellen)
- [Robert Malko](https://github.com/malkomalko)
- [Rodrigo Álvarez](https://github.com/Papipo)
- [Ronan Harris](https://liberapay.com/Karakunai/)
- [Rotabull](https://github.com/rotabull)
- [Rupus Reinefjord](https://github.com/reinefjord)
- [Ruslan Ustitc](https://github.com/ustitc)
- [Sam Aaron](https://github.com/samaaron)
- [Sam Zanca](https://github.com/metruzanca)
- [sambit](https://github.com/soulsam480)
- [Sammy Isseyegh](https://github.com/bkspace)
- [Savva](https://github.com/castletaste)
- [Saša Jurić](https://github.com/sasa1977)
- [Scott Trinh](https://github.com/scotttrinh)
- [Scott Wey](https://github.com/scottwey)
- [Scott Zhu Reeves](https://github.com/star-szr)
- [Sean Cribbs](https://github.com/seancribbs)
- [Sean Jensen-Grey](https://github.com/seanjensengrey)
- [Sean Roberts](https://github.com/SeanRoberts)
- [Sebastian Porto](https://github.com/sporto)
- [Seve Salazar](https://github.com/tehprofessor)
- [Shane Poppleton](https://github.com/codemonkey76)
- [Shuqian Hon](https://github.com/honsq90)
- [Sigma](https://github.com/sigmasternchen)
- [simone](https://github.com/simonewebdesign)
- [Stefan](https://github.com/bytesource)
- [Stefan Hagen](https://github.com/sthagen)
- [Steinar Eliassen](https://github.com/steinareliassen)
- [Stephen Belanger](https://github.com/Qard)
- [Strandinator](https://github.com/Strandinator)
- [Sławomir Ehlert](https://github.com/slafs)
- [Theo Harris](https://github.com/Theosaurus-Rex)
- [Thomas](https://github.com/thomaswhyyou)
- [Thomas Coopman](https://github.com/tcoopman)
- [Thomas Ernst](https://github.com/ernstla)
- [Tim Brown](https://github.com/tmbrwn)
- [Timo Sulg](https://github.com/timgluz)
- [Tom Schuster](https://github.com/tomjschuster)
- [Tomasz Kowal](https://github.com/tomekowal)
- [tommaisey](https://github.com/tommaisey)
- [Tristan de Cacqueray](https://github.com/TristanCacqueray)
- [Tristan Sloughter](https://github.com/tsloughter)
- [Tudor Luca](https://github.com/lucamtudor)
- [tymak](https://github.com/tymak)
- [Valerio Viperino](https://github.com/vvzen)
- [Vassiliy Kuzenkov](https://github.com/bondiano)
- [Vic Valenzuela](https://github.com/sandsower)
- [Victor Rodrigues](https://github.com/rodrigues)
- [Viv Verner](https://github.com/PerpetualPossum)
- [Volker Rabe](https://github.com/yelps)
- [Walton Hoops](https://github.com/Whoops)
- [Weizheng Liu](https://github.com/weizhliu)
- [Willyboar](https://github.com/Willyboar)
- [Wilson Silva](https://github.com/wilsonsilva)
- [Xucong Zhan](https://github.com/HymanZHAN)
- [Yamen Sader](https://github.com/yamen)
- [Yasuo Higano](https://github.com/Yasuo-Higano)
- [yoshi~ ](https://github.com/yoshi-monster)
- [Zsombor Gasparin](https://github.com/gasparinzsombor)
- [ZWubs](https://github.com/zwubs)
- [~1847917](https://liberapay.com/~1847917/)
- [~1867501](https://liberapay.com/~1867501/)
- [Éber Freitas Dias](https://github.com/eberfreitas)

``` =html
<div style="text-align: center">
  <a class="button" href="https://tour.gleam.run/">Try Gleam</a>
</div>
```
