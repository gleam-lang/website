Gleam is a type-safe and scalable language for the Erlang virtual machine and
JavaScript runtimes. Today Gleam [v1.13.0][release] has been published. Let's
go over at the highlights now.

[release]: https://github.com/gleam-lang/gleam/releases/tag/v1.13.0

## External API for Gleam data

One of Gleam's strengths is that it is part of the BEAM and JavaScript
ecosystems, enabling Gleam programs to take advantage of code written in
Erlang, Elixir, JavaScript, and more. This is a large part of how Gleam was
able to become a practical production-ready language so quickly, by not
restricting Gleam programmers to just the comparatively young Gleam package
ecosystem.

A function written in one of these other languages can be imported into a Gleam
module as an "external function", and then called without any additional
performance overhead.

```gleam
@external(erlang, "moon_base", "launch_spaceship")
pub fn lift_off(countdown: Int) -> Result(Spaceship, LaunchError)
```

Here the Erlang function `launch_spaceship` from the module `moon_base` is
being imported.

One restriction to external functions is that they will need to return data
types that Gleam can understand. Gleam's "external type" feature lets the
programmer refer to types defined in other languages, but if the programmer
wants to be able to directly construct and pattern match data from external
functions it will need to be in a format compatible with Gleam data types.

Often a programmer will write a small wrapper function in the external language
to convert the data, and also to make the interface adhere to Gleam patterns
and conventions.

```erlang
-module(moon_base).
-export([launch_spaceship/1]).

launch_spaceship(Countdown) ->
    try
        Spaceship = launch_control:launch_spaceship(Countdown),
        {ok, Spaceship}
    catch
        error:no_fuel -> {error, no_fuel};
        error:bad_weather -> {error, bad_weather}
    end.
```

This `launch_spaceship` Erlang function wraps the function from the
`launch_control` module, converting the exception-based API into a `Result`
type, the Erlang representation of Gleam's `Ok` and `Error` variants.

One thing that a Gleam programmer may find challenging is knowing how to
construct Gleam data in these wrapper functions. A lack of detailed
documentation made it unclear what the correct approach.

This lack of clarity makes learning how to use external code more challenging,
and worse, it may result in programmers using internal APIs that are intended
only to be used by the compiled Gleam code. If the Gleam ecosystem were to grow
with many packages using these internal APIs, it would force the Gleam core team
to support them as if they were public APIs. Committing to these APIs would
greatly limit what changes we can make to the internal representation of Gleam
data, and make many potential performance improvements impossible.

To fix this we have done two things. First, we have created
[a guide on Gleam externals](https://gleam.run/documentation/externals/),
detailing how to correctly write and use externals.

Secondly, a dedicted API is now provided for JavaScript based code to work with
Gleam data, both making usage clearer and giving the Gleam core team maximum
freedom to improve performance in future. Each data type defined in Gleam will
have a set of functions defined to work with it, for example:
type:

```gleam
// In src/person.gleam
pub type Person {
  Teacher(name: String, subject: String)
  Student(name: String, age: Int)
}
```
```javascript
// In src/my_javascript_code.mjs
import {...} from "./person.mjs";

// Constructing custom types
let teacher = Person$Teacher("Joe Armstrong", "Computer Science");
let student = Person$Student("Louis Pilfold", 17);

let randomPerson = Math.random() > 0.5 ? teacher : student;

// Checking variants
let randomIsTeacher = Person$isTeacher(randomPerson);

// Getting fields
let studentAge = Person$Student$age(student);

// The `name` field is shared so can be accessed from either variant
let personName = Person$name(randomPerson);
```

There will be a migration period where existing JavaScript externals will need
to migrate over to the new API. We have created tooling to analyse the Gleam
package ecosystem to identify code that is in need of updating, and we will be
helping with this process.

Further additions will be made to the externals guide detailing useful
patterns, how to avoid common problems, and advising when and how to use
externals.

Thank you [Surya Rose](https://github.com/GearsDatapacks) for taking the lead
role in implementing these new APIs, and for the Gleam team more widely for the
design of this addition!

## Improved bit array exhaustiveness checking

- The compiler now applies an optimisation known as "interference based pruning"
  when compiling bit array pattern matching where matches are performed at the
  start of bit arrays.
  This optimisation drastically reduces compile times, memory usage and the
  compiled code size, removing many redundant checks.
  It is particularly important for network protocol applications where it is
  typical to match on some fixed patterns at the start of the bitarray.
  For example:

  ```gleam
  pub fn parser_headers(headers: BitArray, bytes: Int) -> Headers {
    case headers {
      <<"CONTENT_LENGTH" as header, 0, value:size(bytes), 0, rest:bytes>>
      | <<"QUERY_STRING" as header, 0, value:size(bytes), 0, rest:bytes>>
      | <<"REQUEST_URI" as header, 0, value:size(bytes), 0, rest:bytes>>
      // ...
      | <<"REDIRECT_STATUS" as header, 0, value:size(bytes), 0, rest:bytes>>
      | <<"SCRIPT_NAME" as header, 0, value:size(bytes), 0, rest:bytes>>
        -> [#(header, value), ..parse_headers(rest)]
    }
  }
  ```

  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

- The compiler now raises a warning for unreachable branches that are matching
  on bit array segments that could never match. Consider this example:

  ```gleam
  pub fn get_payload(packet: BitArray) -> Result(BitArray, Nil) {
    case packet {
      <<200, payload:bytes>> -> Ok(payload)
      <<404, _:bits>> -> Error(Nil)
      _ -> Ok(packet)
    }
  }
  ```

  There's a subtle bug here. The second branch can never match since it's
  impossible for the first byte of the bit array to have the value `404`.
  The new error explains this nicely:

  ```text
  warning: Unreachable pattern
    ┌─ /src.gleam:4:5
    │
  4 │     <<404, _:bits>> -> Error(Nil)
    │     ^^^^^^^^^^^^^^^
    │       │
    │       A 1 byte unsigned integer will never match this value

  This pattern cannot be reached as it contains segments that will never
  match.

  Hint: It can be safely removed.
  ```

  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

## Unused argument detection

- The compiler now raises a warning when a function's argument is only passed
  along in a recursive call but not actually used for anything. For example:

  ```gleam
  import gleam/io

  pub fn greet(x, times) {
    case times {
      0 -> Nil
      _ -> {
        io.println("Hello, Joe!")
        greet(x, times - 1)
      }
    }
  }
  ```

  In this piece of code the `x` argument is actually never used, and the
  compiler will raise the following warning:

  ```text
  warning: Unused function argument
    ┌─ /Users/giacomocavalieri/Desktop/prova/src/prova.gleam:3:14
    │
  3 │ pub fn greet(x, times) {
    │              ^ This argument is unused

  This argument is passed to the function when recursing, but it's never used
  for anything.
  ```

  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

## Meaningless opaque type warning

- The compiler now emits a better error message for private types marked as
  opaque. For example, the following piece of code:

  ```gleam
  opaque type Wibble {
    Wobble
  }
  ```

  Would result in the following error:

  ```
  error: Private opaque type
    ┌─ /src/one/two.gleam:2:1
    │
  2 │ opaque type Wibble {
    │ ^^^^^^ You can safely remove this.

  Only a public type can be opaque.
  ```

  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

# TODO: add to documentation

- The language server now offers a quick fix to remove `opaque` from a private
  type:

  ```gleam
  opaque type Wibble {
  // ^^^ This is an error!
    Wobble
  }
  ```

  If you hover over the type and trigger the quick fix, the language server will
  automatically remove the `opaque` keyword:

  ```gleam
  type Wibble {
    Wobble
  }
  ```

  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

## More fault tolerance

- Fault tolerance for analysis of labeled fields in constructor patterns has
  been improved.
  ([sobolevn](https://github.com/sobolevn))

- The parsing of opaque private types is now fault tolerant: having a private
  opaque type in a module no longer stops the compiler from highlighting other
  errors.
  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

- Writing a type name followed by `()` now emits an error during analysis
  rather than parsing, so it no longer stops the compiler from reporting errors
  further in the code.
  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

## Redundant pattern alias warning

- Redundant `_ as x` patterns are now deprecated in favour of `x`.
  ([eutampieri](https://github.com/eutampieri))

- Redundant `_ as x` patterns are rewritten to `x`.
  ([eutampieri](https://github.com/eutampieri))

## More inefficient list check warnings

- The compiler will now raise warning for inefficient use of `list.length()`
  when trying to check is list empty via `0 < list.length(list)` or
  `list.length(list) > 0` as well as in other cases. For example, the following
  code:

  ```gleam
  import gleam/list

  pub fn main() {
    let numbers = [1, 46]
    let _ = 0 < list.length(numbers)
    let _ = list.length(numbers) > 0
  }
  ```

  Would result in following warnings:

  ```
  warning: Inefficient use of `list.length`
    ┌─ /data/data/com.termux/files/home/test_gleam/src/test_gleam.gleam:5:13
    │
  5 │     let _ = 0 < list.length(numbers)
    │             ^^^^^^^^^^^^^^^^^^^^^^^^

  The `list.length` function has to iterate across the whole
  list to calculate the length, which is wasteful if you only
  need to know if the list is empty or not.

  Hint: You can use `the_list != []` instead.

  warning: Inefficient use of `list.length`
    ┌─ /data/data/com.termux/files/home/test_gleam/src/test_gleam.gleam:6:13
    │
  6 │     let _ = list.length(numbers) > 0
    │             ^^^^^^^^^^^^^^^^^^^^^^^^

  The `list.length` function has to iterate across the whole
  list to calculate the length, which is wasteful if you only
  need to know if the list is empty or not.

  Hint: You can use `the_list != []` instead.
  ```

  ([Andrey Kozhev](https://github.com/ankddev))

## Redundant generated JavaScript code removal

- The code generated for blocks on the JavaScript target has been improved and
  is now smaller in certain cases.
  ([Surya Rose](https://github.com/GearsDatapacks))
https://github.com/gleam-lang/gleam/commit/5175a401a084dd524c342f5d7c7501d19a453786

- The compiler now shows a specific syntax error when trying to use an
  angle-bracket syntax for generic types or function definitions:

  ```txt
  error: Syntax error
    ┌─ /src/parse/error.gleam:2:12
    │
  2 │ type Either<a, b> {
    │            ^ I was expecting `(` here.

  Type parameters use lowercase names and are surrounded by parentheses.

      type Either(a, b) {

  See: https://tour.gleam.run/data-types/generic-custom-types/
  ```

  ([Aaron Christiansen](https://github.com/AaronC81))

## A helpful syntax error for JavaScripters

- The compiler now provides an improved error message for when trying to define
  a constant inside a function. For example, the following code:

  ```gleam
  pub fn deep_thought() {
    const the_answer = 42
    the_answer
  }
  ```

  Will produce this error message:

  ```txt
    error: Syntax error
    ┌─ /src/file.gleam:2:3
    │
  3 │   const the_answer = 43
    │   ^^^^^ Constants are not allowed inside functions

  All variables are immutable in Gleam, so constants inside functions are not
  necessary.
  Hint: Either move this into the global scope or use `let` binding instead.
  ```

  ([Surya Rose](https://github.com/GearsDatapacks))

## A helpful syntax error for Pythonistas, Elixirists, and friends

- Compiler now adds a hint when `#`-styled comments are used. This code:

  ```gleam
  fn some() {
    let a = 1
    # let b = 2
  }
  ```

  Now produces:

  ```txt
  error: Syntax error
    ┌─ /src/main.gleam:3:5
    │
  3 │   # let b = 2
    │     ^^^ I was not expecting this

  Found the keyword `let`, expected one of:
  - `(`
  Hint: Maybe you meant to create a comment?
  Comments in Gleam start with `//`, not `#`
  ```

  ([sobolevn](https://github.com/sobolevn))

## OTP application start argument configuration

- The `erlang.application_start_argument` parameter has been added to
  `gleam.toml`. This is a string containing an Erlang term that will be written
  into the package's Erlang `.app` file if `erlang.application_start_module`
  has been set, replacing the default argument of `[]`.
  ([Louis Pilfold](https://github.com/lpil))

## `hex owner transfer`

- The build tool now has a new `hex owner transfer` subcommand to transfer
  ownership of existing packages.
  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

## Displaying dependency version information

- After dependency resolution the build tool will now print all packages added
  and removed, and any versions changed.
  ([Louis Pilfold](https://github.com/lpil))

## Type parameter names in HTML documentation

- When generating documentation, the build tool will now print the names of
  public type aliases instead of internal type names when annotating functions
  and types. For example, for the following code:

  ```gleam
  import my_package/internal

  pub type ExternalAlias = internal.InternalRepresentation

  pub fn do_thing() -> ExternalAlias { ... }
  ```

  This is what the build tool used to generate:

  ```gleam
  pub fn do_thing() -> @internal InternalRepresentation
  ```

  Whereas now it will not use the internal name, and instead produce:

  ```gleam
  pub fn do_thing() -> ExternalAlias
  ```

  ([Surya Rose](https://github.com/GearsDatapacks))

## Tangled support

# TODO: add to documentation

- Support has been added for using Tangled as a repository.
  ([Naomi Roberts](https://github.com/naomieow))

## Remove unreachable branches code action

# TODO: add to documentation

- The language server now offers a code action to remove all the unreachable
  branches in a case expression. For example:

  ```gleam
  pub fn main() {
    case find_user() {
      Ok(user) -> todo
      Ok(Admin) -> todo
  //  ^^^^^^^^^ This branch is unreachable
      Ok(User) -> todo
  //  ^^^^^^^^ This branch is unreachable
      Error(_) -> todo
    }
  }
  ```

  Hovering over one of the unreachable branches and triggering the code action
  would remove all the unreachable branches:

  ```gleam
  pub fn main() {
    case find_user() {
      Ok(user) -> todo

      Error(_) -> todo
    }
  }
  ```

  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

## Pattern match on value code action improvements

- The "pattern match on variable" can now be triggered on lists. For example:

  ```gleam
  pub fn is_empty(list: List(a)) -> Bool {
    //            ^^^^ Triggering the action over here
  }
  ```

  Triggering the action over the `list` argument would result in the following
  code:

  ```gleam
  pub fn is_empty(list: List(a)) -> Bool {
    case list {
      [] -> todo
      [first, ..rest] -> todo
    }
  }
  ```

  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

- The "pattern match on variable" code action can now be triggered on variables
  introduced by other patterns. For example:

  ```gleam
  pub fn main() {
    let User(name:, role:) = find_user("lucy")
    //              ^^^^ Triggering the action over
  }
  ```

  Triggering the action over another variable like `role` would result in the
  following code:

  ```gleam
  pub fn main() {
    let User(name:, role:) = find_user("lucy")
    case role {
      Admin -> todo
      Member -> todo
    }
  }
  ```

  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

- The "pattern match on variable" code action can now be triggered on variables
  in case expressions. For example:

  ```gleam
  pub fn main() {
    case find_user() {
      Ok(user) -> todo
      Error(_) -> todo
    }
  }
  ```

  Triggering the action over the `user` variable would result in the following
  code:

  ```gleam
  pub fn main() {
    case find_user() {
      Ok(Admin) -> todo
      Ok(Member) -> todo
      Error(_) -> todo
    }
  }
  ```

  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

## Add omitted labels code action

- The language server now offers a code action to add the omitted labels in a
  call. For example:

  ```gleam
  pub type User {
    User(first_name: String, last_name: String, likes: List(String))
  }

  pub fn main() {
    let first_name = "Giacomo"
    User(first_name, "Cavalieri", ["gleam"])
  //^^^^ Triggering the code action over here
  }
  ```

  Triggering the code action over the `User` constructor will result in the
  following code:

  ```gleam
  pub type User {
    User(first_name: String, last_name: String, likes: List(String))
  }

  pub fn main() {
    let first_name = "Giacomo"
    User(first_name:, last_name: "Cavalieri", likes: ["gleam"])
  }
  ```

- The "inline variable" code action is now only suggested when hovering over the
  relevant variable.
  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

## Hover support for record fields

- When hovering over a record field in a record access expression, the language
  sever will now show the documentation for that field, if present.
  ([Surya Rose](https://github.com/GearsDatapacks))

## Collapse nested case expression code action

# TODO: add to documentation

- The language server now offers a code action to collapse nested case
  expressions. Take this example:

  ```gleam
  case user {
    User(role: Admin, name:) ->
      // Here the only thing we're doing is pattern matching on the
      // `name` variable we've just defined in the outer pattern.
      case name {
        "Joe" -> "Hello, Joe!"
        _ -> "Hello, stranger"
      }

    _ -> "You're not an admin!"
  }
  ```

  We could simplify this case expression and reduce nesting like so:

  ```gleam
  case user {
    User(role: Admin, name: "Joe") -> "Hello, Joe!"
    User(role: Admin, name: _) -> "Hello, stranger"
    _ -> "You're not an admin!"
  }
  ```

  Now, if you hover over that pattern, the language server will offer the
  "collapse nested case" action that will simplify your code like shown in the
  example above.

  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

## Improved generate function code action

- The "Generate function" code action now allows generating function in other
  modules. For example, given the following code:

  ```gleam
  // maths.gleam
  pub fn add(a: Int, b: Int) -> Int { a + b }

  // main.gleam
  import maths

  pub fn main() -> Int {
    echo maths.add(1, 2)
    echo maths.subtract(from: 2, subtract: 1)
    //         ^ Trigger the "Generate function" code action here
  }
  ```

  The language sever will edit the `maths.gleam` file:

  ```gleam
  pub fn add(a: Int, b: Int) -> Int { a + b }

  pub fn subtract(from from: Int, subtract subtract: Int) -> Int {
    todo
  }
  ```

  ([Surya Rose](https://github.com/GearsDatapacks))

## Improved type naming in code actions

- The "Add type annotations" and "Generate function" code actions now ignore
  type variables defined in other functions, improving the generated code.
  For example:

  ```gleam
  fn something(a: a, b: b, c: c) -> d { todo }

  fn pair(a, b) { #(a, b) }
  ```

  Previously, when triggering the "Add type annotations" code action on the
  `pair` function, the language server would have generated:

  ```gleam
  fn pair(a: e, b: f) -> #(e, f) { #(a, b) }
  ```

  However in 1.13, it will now generate:

  ```gleam
  fn pair(a: a, b: b) -> #(a, b) { #(a, b) }
  ```

  ([Surya Rose](https://github.com/GearsDatapacks))

## Alternative patterns LS support

- You can now go to definition, rename, etc. from alternative patterns!

  ```gleam
  case wibble {
    Wibble | Wobble -> 0
    //         ^- Previously you could not trigger actions from here
  }

  ```

  ([fruno](https://github.com/fruno-bulax))

## Improved annotations in code actions

- When showing types of values on hover, or adding type annotations, the language
  server will now prefer public type aliases to internal types. For example, if
  the "Add type annotations" code action was triggered on the following code:

  ```gleam
  import lustre/html
  import lustre/element
  import lustre/attribute

  pub fn make_link(attribute, element) {
    html.a([attribute], [elements])
  }
  ```

  Previously, the following code would have been generated:

  ```gleam
  pub fn make_link(
    attribute: vattr.Attribute,
    element: vdom.Element(a)
  ) -> vdom.Element(a) {
     html.a([attribute], [elements])
  }
  ```

  Which references internal types which should not be imported by the user.
  However, now the language server will produce the following:

  ```gleam
  pub fn make_link(
    attribute: attribute.Attribute,
    element: element.Element(a)
  ) -> element.Element(a) {
     html.a([attribute], [elements])
  }
  ```

  ([Surya Rose](https://github.com/GearsDatapacks))

## Extract function code action

- The language server now offers an "Extract function" code action to extract a
  selected piece of code into a separate function. For example:

  ```gleam
  const head_byte_count = 256

  pub fn get_head_of_file() {
    let assert Ok(contents) = read_file()

    case contents {
  //^ Select from here
      <<head:bytes-size(head_byte_count), _:bits>> -> Ok(head)
      _ -> Error(Nil)
    }
  //^ Until here
  }
  ```

  Would become:

  ```gleam
  const head_byte_count = 256

  pub fn get_head_of_file() {
    let assert Ok(contents) = read_file()

    function(contents)
  }

  fn function(contents: BitArray) -> Result(BitArray, Nil) {
    case contents {
      <<head:bytes-size(head_byte_count), _:bits>> -> Ok(head)
      _ -> Error(Nil)
    }
  }
  ```

  You can then use language server renaming to choose an appropriate name for
  the new function.

  ([Surya Rose](https://github.com/GearsDatapacks))

## Formatter improvements

- The formatter now removes needless multiple negations that are safe to remove.
  For example, this snippet of code:

  ```gleam
  pub fn useless_negations() {
    let lucky_number = --11
    let lucy_is_a_star = !!!False
  }
  ```

  Is rewritten as:

  ```gleam
  pub fn useless_negations() {
    let lucky_number = 11
    let lucy_is_a_star = !False
  }
  ```

  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

- The formatter no longer removes blocks from case clause guards.
  ([Giacomo Cavalieri](https://github.com/giacomocavalieri))

- The formatter now properly formats tuple return annotation with comments.

































## And the rest

And thank you to the bug fixers and experience polishers:
[Andrey Kozhev](https://github.com/ankddev),
[Benjamin Peinhardt](https://github.com/bcpeinhardt),
[Danielle Maywood](https://github.com/DanielleMaywood),
[fruno](https://github.com/frunobulax-the-poodle),
[Giacomo Cavalieri](https://github.com/giacomocavalieri),
[Joohoon Cha](https://github.com/jcha0713),
[Matias Carlander](https://github.com/matiascr),
[Surya Rose](https://github.com/GearsDatapacks), and
[Tristan-Mihai Radulescu](https://github.com/Courtcircuits)).

For full details of the many fixes and improvements they've implemented see [the
changelog][changelog].

[changelog]: https://github.com/gleam-lang/gleam/blob/main/changelog/v1.13.md

## A call for support

Gleam is not owned by a corporation; instead it is entirely supported by
sponsors, most of which contribute between $5 and $20 USD per month, and Gleam
is my sole source of income.

We have made great progress towards our goal of being able to appropriately pay
the core team members, but we still have further to go. Please consider
supporting [the project][sponsor] or core team members
[Giacomo Cavalieri](https://github.com/sponsors/giacomocavalieri) and
[Surya Rose](https://github.com/sponsors/GearsDatapacks)
on GitHub Sponsors.

``` =html
<a class="sponsor-level0" href="https://github.com/sponsors/lpil" rel="noopener" target="_blank">
  <img src="/images/community/github.svg" alt="GitHub Sponsors" style="filter: invert(1)"/>
</a>
```

[sponsor]: https://github.com/sponsors/lpil

Thank you to all our sponsors! And special thanks to our top sponsors:

``` =html
<ul class="top-sponsors">
  <li>
    <a class="sponsor-level1" href="https://lambdaclass.com/" rel="noopener" target="_blank" >
      <img src="/images/sponsors/lambda-class-white.png" alt="Lambda Class">
    </a>
  </li>
  <li>
    <a class="sponsor-level2" href="https://williamsandholmes.com" rel="noopener" target="_blank">
      <img alt="Williams &amp; Holmes" src="/images/sponsors/williamsandholmes.svg">
    </a>
  </li>
</ul>
```

- [Aaron Gunderson](https://github.com/agundy)
- [Aayush](https://github.com/aayush-tripathi)
- [Abel Jimenez](https://github.com/abeljim)
- [ad-ops](https://github.com/ad-ops)
- [Adam Brodzinski](https://github.com/AdamBrodzinski)
- [Adam Johnston](https://github.com/adjohnston)
- [Adam Wyłuda](https://github.com/adam-wyluda)
- [Adi Iyengar](https://github.com/thebugcatcher)
- [Adrian Mouat](https://github.com/amouat)
- [Ajit Krishna](https://github.com/JitPackJoyride)
- [Aleksei Gurianov](https://github.com/Guria)
- [Alembic](https://alembic.com.au)
- [Alex Houseago](https://github.com/ahouseago)
- [Alex Manning](https://github.com/rawhat)
- [Alexander Koutmos](https://github.com/akoutmos)
- [Alexander Stensrud](https://github.com/muonoum)
- [Alexandre Del Vecchio](https://github.com/defgenx)
- [Aliaksiej Maroz](https://github.com/ricountzero)
- [Ameen Radwan](https://github.com/Acepie)
- [Andho Mohamed](https://github.com/andho)
- [Andrea Bueide](https://github.com/abueide)
- [André Mazoni](https://github.com/andremw)
- [Andy Young](https://github.com/ayoung19)
- [Antharuu](https://github.com/antharuu)
- [Anthony Khong](https://github.com/anthony-khong)
- [Anthony Maxwell](https://github.com/Illbjorn)
- [Anthony Scotti](https://github.com/amscotti)
- [Arthur Weagel](https://github.com/aweagel)
- [Arya Irani](https://github.com/aryairani)
- [Austin Beau Bodzas](https://github.com/Beaudidly)
- [Azure Flash](https://github.com/azureflash)
- [Barry Moore II](https://github.com/chiroptical)
- [Bartek Górny](https://github.com/bartekgorny)
- [Ben Martin](https://github.com/requestben)
- [Ben Marx](https://github.com/bgmarx)
- [Ben Myles](https://github.com/benmyles)
- [Benjamin Kane](https://github.com/bbkane)
- [Benjamin Moss](https://github.com/drteeth)
- [bgw](https://github.com/bgwdotdev)
- [Bjarte Aarmo Lund](https://github.com/bjartelund)
- [Bjoern Paschen](https://github.com/00bpa)
- [Brad Mehder](https://github.com/bmehder)
- [Brett Cannon](https://github.com/brettcannon)
- [Brett Kolodny](https://github.com/brettkolodny)
- [Brian Dawn](https://github.com/brian-dawn)
- [Brian Glusman](https://github.com/bglusman)
- [Bruce Williams](https://github.com/bruce)
- [Bruno Michel](https://github.com/nono)
- [bucsi](https://github.com/bucsi)
- [Cam Ray](https://github.com/camray)
- [Cameron Presley](https://github.com/cameronpresley)
- [Carl Bordum Hansen](https://github.com/carlbordum)
- [Carlo Munguia](https://github.com/carlomunguia)
- [Carlos Saltos](https://github.com/csaltos)
- [Chad Selph](https://github.com/chadselph)
- [Charlie Duong](https://github.com/ctdio)
- [Charlie Govea](https://github.com/charlie-n01r)
- [Chew Choon Keat](https://github.com/choonkeat)
- [Chris Donnelly](https://github.com/ceedon)
- [Chris King](https://github.com/Morzaram)
- [Chris Lloyd](https://github.com/chrislloyd)
- [Chris Ohk](https://github.com/utilForever)
- [Chris Rybicki](https://github.com/Chriscbr)
- [Chris Vincent](https://github.com/cvincent)
- [Christopher David Shirk](https://github.com/christophershirk)
- [Christopher De Vries](https://github.com/devries)
- [Christopher Dieringer](https://github.com/cdaringe)
- [Christopher Jung](https://github.com/christopherhjung)
- [Christopher Keele](https://github.com/christhekeele)
- [CJ Salem](https://github.com/specialblend)
- [Clifford Anderson](https://github.com/CliffordAnderson)
- [Coder](https://github.com/coder)
- [Cole Lawrence](https://github.com/colelawrence)
- [Comamoca](https://github.com/Comamoca)
- [Comet](https://github.com/comet-ml)
- [Constantin (Cleo) Winkler](https://github.com/Lucostus)
- [Corentin J.](https://github.com/jcorentin)
- [cysabi](https://github.com/cysabi)
- [Damir Vandic](https://github.com/dvic)
- [Dan](https://github.com/d2718)
- [Dan Dresselhaus](https://github.com/ddresselhaus)
- [Dan Gieschen Knutson](https://github.com/Giesch)
- [Dan Strong](https://github.com/strongoose)
- [Danielle Maywood](https://github.com/DanielleMaywood)
- [Daniil Nevdah](https://github.com/ndan)
- [Danny Arnold](https://github.com/pinnet)
- [Danny Martini](https://github.com/despairblue)
- [Dave Lucia](https://github.com/davydog187)
- [David Bernheisel](https://github.com/dbernheisel)
- [David Coba](https://github.com/cobac)
- [David Cornu](https://github.com/davidcornu)
- [David Pendray](https://github.com/dpen2000)
- [Dennis Dang](https://github.com/dangdennis)
- [dennistruemper](https://github.com/dennistruemper)
- [dependabot[bot]](https://github.com/dependabot%5Bbot%5D)
- [Diemo Gebhardt](https://github.com/diemogebhardt)
- [Donnie Flood](https://github.com/floodfx)
- [Dusty Phillips](https://github.com/dusty-phillips)
- [Dylan Anthony](https://github.com/dbanty)
- [Dylan Carlson](https://github.com/gdcrisp)
- [Ed Hinrichsen](https://github.com/edhinrichsen)
- [Ed Rosewright](https://github.com/EdRW)
- [Edon Gashi](https://github.com/edongashi)
- [Eileen Noonan](https://github.com/enoonan)
- [eli](https://github.com/dropwhile)
- [elke](https://liberapay.com/ijomeli/)
- [Emma](https://github.com/Emma-Fuller)
- [Emma](https://github.com/Shadowsx3)
- [Endo Shogo](https://github.com/yellowsman)
- [Eric Koslow](https://github.com/ekosz)
- [Erik Terpstra](https://github.com/eterps)
- [erikareads](https://liberapay.com/erikareads/)
- [ErikML](https://github.com/ErikML)
- [erlend-axelsson](https://github.com/erlend-axelsson)
- [Ernesto Malave](https://github.com/oberernst)
- [Ethan Olpin](https://github.com/EthanOlpin)
- [Evaldo Bratti](https://github.com/evaldobratti)
- [Evan Johnson](https://github.com/evanj2357)
- [evanasse](https://github.com/evanasse)
- [Fabrizio Damicelli](https://github.com/fabridamicelli)
- [Fede Esteban](https://github.com/fmesteban)
- [Felix](https://github.com/yerTools)
- [Fernando Farias](https://github.com/nandofarias)
- [Filip Figiel](https://github.com/ffigiel)
- [Fleey](https://github.com/iFleey)
- [Florian Kraft](https://github.com/floriank)
- [Francis Hamel](https://github.com/francishamel)
- [frankwang](https://github.com/Frank-III)
- [G-J van Rooyen](https://github.com/gvrooyen)
- [Gabriel Vincent](https://github.com/gabrielvincent)
- [Gavin Panella](https://github.com/allenap)
- [GearsDatapacks](https://github.com/GearsDatapacks)
- [Geir Arne Hjelle](https://github.com/gahjelle)
- [Georg Hartmann](https://github.com/brasilikum)
- [Georgi Martsenkov](https://github.com/gmartsenkov)
- [ggobbe](https://github.com/ggobbe)
- [Giacomo Cavalieri](https://github.com/giacomocavalieri)
- [Giovanni Kock Bonetti](https://github.com/giovannibonetti)
- [given](https://github.com/givensuman)
- [Graham Vasquez](https://github.com/GV14982)
- [Grant Everett](https://github.com/YoyoSaur)
- [graphiteisaac](https://github.com/graphiteisaac)
- [Guilherme de Maio](https://github.com/nirev)
- [Guillaume Heu](https://github.com/guillheu)
- [Guillaume Hivert](https://github.com/ghivert)
- [Gunnar Ahlberg](https://github.com/gunnarahlberg)
- [Hammad Javed](https://github.com/hammad-r-javed)
- [Hannes Nevalainen](https://github.com/kwando)
- [Hannes Schnaitter](https://github.com/ildorn)
- [Hans Raaf](https://github.com/oderwat)
- [Hayleigh Thompson](https://github.com/hayleigh-dot-dev)
- [Hazel Bachrach](https://github.com/hibachrach)
- [Henning Dahlheim](https://github.com/hdahlheim)
- [Henrik Tudborg](https://github.com/tudborg)
- [Henry Warren](https://github.com/henrysdev)
- [Heyang Zhou](https://github.com/losfair)
- [Hizuru3](https://liberapay.com/Hizuru3/)
- [Hubert Małkowski](https://github.com/hubertmalkowski)
- [Iain H](https://github.com/iainh)
- [Ian González](https://github.com/Ian-GL)
- [Ian M. Jones](https://github.com/ianmjones)
- [Igor Montagner](https://github.com/igordsm)
- [inoas](https://github.com/inoas)
- [Isaac Harris-Holt](https://github.com/isaacharrisholt)
- [Isaac McQueen](https://github.com/imcquee)
- [István Bozsó](https://github.com/bozso)
- [Ivar Vong](https://github.com/ivarvong)
- [Jacob Lamb](https://github.com/jacobdalamb)
- [Jake Cleary](https://github.com/jakecleary)
- [Jake Wood](https://github.com/jzwood)
- [Jakob Ladegaard Møller](https://github.com/jakob753951)
- [James Birtles](https://github.com/jamesbirtles)
- [James MacAulay](https://github.com/jamesmacaulay)
- [Jan Pieper](https://github.com/janpieper)
- [Jan Skriver Sørensen](https://github.com/monzool)
- [Jean Niklas L'orange](https://github.com/hypirion)
- [Jean-Adrien Ducastaing](https://github.com/MightyGoldenOctopus)
- [Jean-Luc Geering](https://github.com/jlgeering)
- [Jean-Marc QUERE](https://github.com/jihem)
- [Jen Stehlik](https://github.com/okkdev)
- [Jerred Shepherd](https://github.com/shepherdjerred)
- [Jesse Cooke](https://github.com/jc00ke)
- [jiangplus](https://github.com/jiangplus)
- [Jimpjorps™](https://github.com/hunkyjimpjorps)
- [Joey Kilpatrick](https://github.com/joeykilpatrick)
- [Joey Trapp](https://github.com/joeytrapp)
- [Johan Strand](https://github.com/johan-st)
- [John Björk](https://github.com/JohnBjrk)
- [John Strunk](https://github.com/jrstrunk)
- [Jojor](https://github.com/xjojorx)
- [Jon Charter](https://github.com/jmcharter)
- [Jon Lambert](https://github.com/jonlambert)
- [Jonas E. P](https://github.com/igern)
- [Jonas Hedman Engström](https://github.com/JonasHedEng)
- [JonasGruenwald](https://github.com/JonasGruenwald)
- [Jonatan Männchen](https://github.com/maennchen)
- [jooaf](https://github.com/jooaf)
- [Joseph Lozano](https://github.com/joseph-lozano)
- [Joseph T. Lyons](https://github.com/JosephTLyons)
- [Joshua Byrd](https://github.com/phocks)
- [Joshua Steele](https://github.com/joshocalico)
- [Julian Hirn](https://github.com/nineluj)
- [Julian Lukwata](https://liberapay.com/d2quadra/)
- [Julian Schurhammer](https://github.com/schurhammer)
- [Justin Lubin](https://github.com/justinlubin)
- [Jérôme Schaeffer](https://github.com/Neofox)
- [Jørgen Andersen](https://github.com/jorg1piano)
- [KamilaP](https://github.com/Kamila-P)
- [Kemp Brinson](https://github.com/jkbrinso)
- [Kero van Gelder](https://github.com/keroami)
- [Kevin Schweikert](https://github.com/kevinschweikert)
- [Kritsada Sunthornwutthikrai](https://github.com/Bearfinn)
- [Kryštof Řezáč](https://github.com/krystofrezac)
- [Krzysztof Gasienica-Bednarz](https://github.com/krzysztofgb)
- [Landon](https://github.com/jly36963)
- [Leah Ulmschneider](https://github.com/leah-u)
- [Leandro Ostera](https://github.com/leostera)
- [Lee Jarvis](https://github.com/leejarvis)
- [Lennon Day-Reynolds](https://github.com/rcoder)
- [Leon Qadirie](https://github.com/leonqadirie)
- [Leonardo Donelli](https://github.com/LeartS)
- [Lexx](https://github.com/lexx27)
- [lidashuang](https://github.com/defp)
- [Lily Rose](https://github.com/LilyRose2798)
- [Lukas Bjarre](https://github.com/lbjarre)
- [Luke Amdor](https://github.com/lamdor)
- [Luna](https://github.com/2kool4idkwhat)
- [Manuel Rubio](https://github.com/manuel-rubio)
- [Mario Vellandi](https://github.com/mvellandi)
- [Marius Kalvø](https://github.com/mariuskalvo)
- [Mark Dodwell](https://github.com/mkdynamic)
- [Mark Holmes](https://github.com/markholmes)
- [Mark Markaryan](https://github.com/markmark206)
- [Martin Fojtík](https://github.com/martinfojtik)
- [Martin Janiczek](https://github.com/Janiczek)
- [Martin Poelstra](https://github.com/poelstra)
- [Martin Rechsteiner ](https://github.com/rechsteiner)
- [Mat Warger](https://github.com/mwarger)
- [Matt Heise](https://github.com/mhheise)
- [Matt Mullenweg](https://github.com/m)
- [Matt Savoia](https://github.com/matt-savvy)
- [Matt Van Horn](https://github.com/mattvanhorn)
- [Matthew Jackson](https://github.com/matthewj-dev)
- [Matthew Whitworth](https://github.com/mwhitworth)
- [Matthias Nüßler](https://github.com/mnuessler)
- [Max Harris](https://github.com/maxh213)
- [Max McDonnell](https://github.com/maxmcd)
- [metame](https://github.com/metame)
- [METATEXX GmbH](https://github.com/metatexx)
- [Metin Emiroğlu](https://github.com/amiroff)
- [Michael Davis](https://github.com/the-mikedavis)
- [Michael Duffy](https://github.com/stunthamster)
- [Michael Jones](https://github.com/michaeljones)
- [Michael Lynch](https://github.com/mtlynch)
- [Michael Maysonet](https://github.com/michaelmaysonet74)
- [Michael Mazurczak](https://github.com/monocursive)
- [Michael McClintock](https://github.com/mrmcc3)
- [Michal Timko](https://github.com/tymak)
- [Mikael Karlsson](https://github.com/karlsson)
- [Mike Roach](https://github.com/mroach)
- [Mikey J](https://liberapay.com/mikej/)
- [MoeDev](https://github.com/MoeDevelops)
- [MzRyuKa](https://github.com/rykawamu)
- [n8n - Workflow Automation](https://github.com/n8nio)
- [Natanael Sirqueira](https://github.com/natanaelsirqueira)
- [Nathaniel Knight](https://github.com/nathanielknight)
- [NFIBrokerage](https://github.com/NFIBrokerage)
- [Nick Chapman](https://github.com/nchapman)
- [Nick Reynolds](https://github.com/ndreynolds)
- [Nicklas Sindlev Andersen](https://github.com/NicklasXYZ)
- [NicoVIII](https://github.com/NicoVIII)
- [Nik Revenco](https://github.com/nik-rev)
- [Niket Shah](https://github.com/mrniket)
- [Nikolai Steen Kjosnes](https://github.com/blink1415)
- [Ninaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa](https://github.com/ninanomenon)
- [NineFX](http://www.ninefx.com)
- [NNB](https://github.com/NNBnh)
- [nnuuvv](https://github.com/nnuuvv)
- [Noah Betzen](https://github.com/Nezteb)
- [Nomio](https://github.com/nomio)
- [nunulk](https://github.com/nunulk)
- [Ocean](https://github.com/oceanlewis)
- [Olaf Sebelin](https://github.com/osebelin)
- [OldhamMade](https://github.com/OldhamMade)
- [Oliver Medhurst](https://github.com/CanadaHonk)
- [Oliver Tosky](https://github.com/otosky)
- [optizio](https://github.com/optizio)
- [Patrick Wheeler](https://github.com/Davorak)
- [Paul Guse](https://github.com/pguse)
- [paul vidal](https://github.com/vidalpaul)
- [Pedro Correa](https://github.com/Tulkdan)
- [Pete Jodo](https://github.com/petejodo)
- [Peter Rice](https://github.com/pvsr)
- [Philpax](https://github.com/philpax)
- [Qdentity](https://github.com/qdentity)
- [Race Williams](https://github.com/raquentin)
- [Rasmus](https://github.com/stoft)
- [Raúl Chouza ](https://github.com/chouzar)
- [re.natillas](https://github.com/renatillas)
- [Redmar Kerkhoff](https://github.com/redmar)
- [Reilly Tucker Siemens](https://github.com/reillysiemens)
- [Renato Massaro](https://github.com/renatomassaro)
- [Renovator](https://github.com/renovatorruler)
- [Richard Viney](https://github.com/richard-viney)
- [Rico Leuthold](https://github.com/rico)
- [Rintaro Okamura](https://github.com/rinx)
- [Ripta Pasay](https://github.com/ripta)
- [Robert Attard](https://github.com/TanklesXL)
- [Robert Ellen](https://github.com/rellen)
- [Robert Malko](https://github.com/malkomalko)
- [Rodrigo Álvarez](https://github.com/Papipo)
- [Ronan Harris](https://liberapay.com/Karakunai/)
- [Rotabull](https://github.com/rotabull)
- [Rupus Reinefjord](https://github.com/reinefjord)
- [Ruslan Ustitc](https://github.com/ustitc)
- [Russell Clarey](https://github.com/rclarey)
- [Sakari Bergen](https://github.com/sbergen)
- [Sam Aaron](https://github.com/samaaron)
- [Sam Zanca](https://github.com/metruzanca)
- [sambit](https://github.com/soulsam480)
- [Sammy Isseyegh](https://github.com/bkspace)
- [Samu](https://github.com/scristobal)
- [Savva](https://github.com/castletaste)
- [Saša Jurić](https://github.com/sasa1977)
- [Scott Trinh](https://github.com/scotttrinh)
- [Scott Wey](https://github.com/scottwey)
- [Scott Zhu Reeves](https://github.com/star-szr)
- [Sean Cribbs](https://github.com/seancribbs)
- [Sean Jensen-Grey](https://github.com/seanjensengrey)
- [Sean Roberts](https://github.com/SeanRoberts)
- [Sebastian Bugge](https://github.com/Kaholaz)
- [Sebastian Porto](https://github.com/sporto)
- [Seve Salazar](https://github.com/tehprofessor)
- [Sgregory42](https://github.com/Sgregory42)
- [Shane Poppleton](https://github.com/codemonkey76)
- [Shawn Drape](https://github.com/shawndrape)
- [shunom](https://github.com/Daniel-Shunom)
- [Sigma](https://github.com/sigmasternchen)
- [simone](https://github.com/simonewebdesign)
- [Stefan](https://github.com/bytesource)
- [Stefan Hagen](https://github.com/sthagen)
- [Steinar Eliassen](https://github.com/steinareliassen)
- [Stephen Belanger](https://github.com/Qard)
- [Strandinator](https://github.com/Strandinator)
- [SyntacticalAnomaly](https://github.com/SyntacticalAnomaly)
- [Sławomir Ehlert](https://github.com/slafs)
- [Theo Harris](https://github.com/Theosaurus-Rex)
- [Thomas](https://github.com/thomaswhyyou)
- [Thomas Coopman](https://github.com/tcoopman)
- [Thomas Crescenzi](https://github.com/trescenzi)
- [Thomas Ernst](https://github.com/ernstla)
- [Tim Brown](https://github.com/tmbrwn)
- [Timo Sulg](https://github.com/timgluz)
- [tkanerva](https://github.com/tkanerva)
- Tolek
- [Tom Hughes](https://github.com/tomalexhughes)
- [Tom Schuster](https://github.com/tomjschuster)
- [Tomasz Kowal](https://github.com/tomekowal)
- Tomek
- [tommaisey](https://github.com/tommaisey)
- [Tristan de Cacqueray](https://github.com/TristanCacqueray)
- [Tristan Sloughter](https://github.com/tsloughter)
- [Tudor Luca](https://github.com/lucamtudor)
- [upsidedowncake](https://github.com/upsidedownsweetfood)
- [Valerio Viperino](https://github.com/vvzen)
- [Viv Verner](https://github.com/PerpetualPossum)
- [Volker Rabe](https://github.com/yelps)
- [Walton Hoops](https://github.com/Whoops)
- [Weizheng Liu](https://github.com/weizhliu)
- [Willyboar](https://github.com/Willyboar)
- [Wilson Silva](https://github.com/wilsonsilva)
- [Yamen Sader](https://github.com/yamen)
- [Yasuo Higano](https://github.com/Yasuo-Higano)
- [yoshi~](https://github.com/yoshi-monster)
- [zenconomist](https://github.com/zenconomist)
- [Zij-IT](https://github.com/Zij-IT)
- [zonghan](https://github.com/caifanuncle)
- [Zsombor Gasparin](https://github.com/gasparinzsombor)
- [ZWubs](https://github.com/zwubs)
- [~1814730](https://liberapay.com/~1814730/)
- [~1847917](https://liberapay.com/~1847917/)
- [~1867501](https://liberapay.com/~1867501/)
- [Éber Freitas Dias](https://github.com/eberfreitas)

``` =html
<div style="text-align: center">
  <a class="button" href="https://tour.gleam.run/">Try Gleam</a>
</div>
```
