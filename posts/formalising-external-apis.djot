Gleam is a type-safe and scalable language for the Erlang virtual machine and
JavaScript runtimes. Today Gleam [v1.13.0][release] has been published. Let's
go over at the highlights now.

[release]: https://github.com/gleam-lang/gleam/releases/tag/v1.13.0

## External API for Gleam data

One of Gleam's strengths is that it is part of the BEAM and JavaScript
ecosystems, enabling Gleam programs to take advantage of code written in
Erlang, Elixir, JavaScript, and more. This is a large part of how Gleam was
able to become a practical production-ready language so quickly, by not
restricting Gleam programmers to just the comparatively young Gleam package
ecosystem.

A function written in one of these other languages can be imported into a Gleam
module as an "external function", and then called without any additional
performance overhead.

```gleam
@external(erlang, "moon_base", "launch_spaceship")
pub fn lift_off(countdown: Int) -> Result(Spaceship, LaunchError)
```

Here the Erlang function `launch_spaceship` from the module `moon_base` is
being imported.

One restriction to external functions is that they will need to return data
types that Gleam can understand. Gleam's "external type" feature lets the
programmer refer to types defined in other languages, but if the programmer
wants to be able to directly construct and pattern match data from external
functions it will need to be in a format compatible with Gleam data types.

Often a programmer will write a small wrapper function in the external language
to convert the data, and also to make the interface adhere to Gleam patterns
and conventions.

```erlang
-module(moon_base).
-export([launch_spaceship/1]).

launch_spaceship(Countdown) ->
    try
        Spaceship = launch_control:launch_spaceship(Countdown),
        {ok, Spaceship}
    catch
        error:no_fuel -> {error, no_fuel};
        error:bad_weather -> {error, bad_weather}
    end.
```

This `launch_spaceship` Erlang function wraps the function from the
`launch_control` module, converting the exception-based API into a `Result`
type, the Erlang representation of Gleam's `Ok` and `Error` variants.

One thing that a Gleam programmer may find challenging is knowing how to
construct Gleam data in these wrapper functions. A lack of detailed
documentation made it unclear what the correct approach.

This lack of clarity makes learning how to use external code more challenging,
and worse, it may result in programmers using internal APIs that are intended
only to be used by the compiled Gleam code. If the Gleam ecosystem were to grow
with many packages using these internal APIs, it would force the Gleam core team
to support them as if they were public APIs. Committing to these APIs would
greatly limit what changes we can make to the internal representation of Gleam
data, and make many potential performance improvements impossible.

To fix this we have done two things. First, we have created
[a guide on Gleam externals](https://gleam.run/documentation/externals/),
detailing how to correctly write and use externals.

Secondly, a dedicted API is now provided for JavaScript based code to work with
Gleam data, both making usage clearer and giving the Gleam core team maximum
freedom to improve performance in future. Each data type defined in Gleam will
have a set of functions defined to work with it, for example:
type:

```gleam
// In src/person.gleam
pub type Person {
  Teacher(name: String, subject: String)
  Student(name: String)
}
```
```javascript
// In src/my_javascript_code.mjs
import {...} from "./person.mjs";

// Constructing custom types
let teacher = Person$Teacher("Joe Armstrong", "Computer Science");
let student = Person$Student("Louis Pilfold");

let randomPerson = Math.random() > 0.5 ? teacher : student;

// Checking variants
let randomIsTeacher = Person$isTeacher(randomPerson);

// Getting fields
let teacherSubject = Person$Teacher$subject(teacher);

// The `name` field is shared so can be accessed from either variant
let personName = Person$name(randomPerson);
```

There will be a migration period where existing JavaScript externals will need
to migrate over to the new API. We have created tooling to analyse the Gleam
package ecosystem to identify code that is in need of updating, and we will be
helping with this process.

Further additions will be made to the externals guide detailing useful
patterns, how to avoid common problems, and advising when and how to use
externals.

Thank you [Surya Rose](https://github.com/GearsDatapacks) for taking the lead
role in implementing these new APIs, and for the Gleam team more widely for the
design of this addition!

## Improved bit array exhaustiveness checking

Gleam's bit array syntax allows you to declaratively construct and parse binary
data in a way that may be easier to understand than using binary operators.

The compiler now applies an optimisation known as "interference based pruning"
when compiling bit array pattern matching where matches are performed at the
start of bit arrays. This optimisation drastically reduces compile times,
memory usage and the compiled code size, removing many redundant checks.

It is particularly impactful for programs that pattern match on some fixed
patterns at the start of the bit array. For example, network protocol
parsers.

```gleam
pub fn parser_headers(headers: BitArray, bytes: Int) -> Headers {
  case headers {
    <<"CONTENT_LENGTH" as header, 0, value:size(bytes), 0, rest:bytes>>
    | <<"QUERY_STRING" as header, 0, value:size(bytes), 0, rest:bytes>>
    | <<"REQUEST_URI" as header, 0, value:size(bytes), 0, rest:bytes>>
    // ...
    | <<"REDIRECT_STATUS" as header, 0, value:size(bytes), 0, rest:bytes>>
    | <<"SCRIPT_NAME" as header, 0, value:size(bytes), 0, rest:bytes>>
      -> [#(header, value), ..parse_headers(rest)]
  }
}
```

Additionally, the compiler now raises a warning for unreachable branches that
are matching on bit array segments that could never match. Consider this
example:

```gleam
pub fn get_payload(packet: BitArray) -> Result(BitArray, Nil) {
  case packet {
    <<200, payload:bytes>> -> Ok(payload)
    <<404, _:bits>> -> Error(Nil)
    _ -> Ok(packet)
  }
}
```

There's a subtle bug here. The second branch can never match since it's
impossible for the first byte of the bit array to have the value `404`.
The new error explains this nicely:

``` =html
<pre><code><b><span class="code-warning">warning</span>: Unreachable pattern</b>
<span class="code-decoration">  ┌─</span> /src.gleam:4:5
<span class="code-decoration">  │</span>
<span class="code-decoration">4 │</span>     <span class="code-warning">&lt;&lt;404, _:bits&gt;&gt;</span> -&gt; Error(Nil)
<span class="code-decoration">  │</span>     <span class="code-warning">^^^^^^^^^^^^^^^</span>
<span class="code-decoration">  │</span>       <span class="code-warning">│</span>
<span class="code-decoration">  │</span>       <span class="code-warning">A 1 byte unsigned integer will never match this value</span>

This pattern cannot be reached as it contains segments that will never
match.

Hint: It can be safely removed.
</code></pre>
```

Thank you [Giacomo Cavalieri](https://github.com/giacomocavalieri) for these
improvements! Exhaustiveness checking is a very complex field, so these
additions are very impressive.

## Unused argument detection

Gleam's unused code detection and purity tracking emits a warning any time some
code is unused and could be removed without changing the behaviour of the
program.

This has been extended to be able to identify function arguments that are used
when the function calls itself recursively, but never actually used in the
function's implementation. For example:

```gleam
import gleam/io

pub fn greet(x, times) {
  case times {
    0 -> Nil
    _ -> {
      io.println("Hello, Joe!")
      greet(x, times - 1)
    }
  }
}
```

In this piece of code the `x` argument is unused, so the compiler will raise
the following warning:

``` =html
<pre><code><b><span class="code-warning">warning</span>: Unused function argument</b>
<span class="code-decoration">  ┌─</span> /Users/giacomocavalieri/Desktop/prova/src/prova.gleam:3:14
<span class="code-decoration">  │</span>
<span class="code-decoration">3 │</span> pub fn greet(<span class="code-warning">x</span>, times) {
<span class="code-decoration">  │</span>              <span class="code-warning">^ This argument is unused</span>

This argument is passed to the function when recursing, but it's never
used for anything.
</code></pre>
```

Thank you [Giacomo Cavalieri](https://github.com/giacomocavalieri)!

## Better meaningless opaque type error

A public custom type can be marked as "opaque", meaning that while other
modules can import and reference the type, they are unable to construct or
pattern match on values of that type. This is useful for restricting the ways
that a data type can be used in order to provide a more robust API.

```gleam
pub opaque type Permission {
  SuperUser
  Regular
  Restricted
}
```

It is invalid to mark a private type as opaque. Previously this would result in
a slightly cryptic syntax, but now a specific helpful error has been added for
this case.

``` =html
<pre><code><b><span class="code-error">error</span>: Private opaque type</b>
<span class="code-decoration">  ┌─</span> /src/one/two.gleam:2:1
<span class="code-decoration">  │</span>
<span class="code-decoration">2 │</span> <span class="code-error">opaque</span> type Wibble {
<span class="code-decoration">  │</span> <span class="code-error">^^^^^^ You can safely remove this.</span>

Only a public type can be opaque.
</code></pre>
```

# TODO: add to documentation

The language server now also offers a "quick fix" code action to remove
`opaque` from a private type:

```gleam
opaque type Wibble {
// ^^^ This is an error!
  Wobble
}
```

If you hover over the type and trigger the quick fix, the language server will
automatically remove the `opaque` keyword:

```gleam
type Wibble {
  Wobble
}
  ```

Thank you [Giacomo Cavalieri](https://github.com/giacomocavalieri)!

## More fault tolerance

Gleam's compiler implements _fault tolerant analysis_. This means that when
there is some error in the code that means it is invalid and cannot be compiled,
the compiler can still continue to analyse the code to the best of its ability,
ignoring the invalid parts. Because of this Gleam language server can have a
good understanding of the code and provide IDE feature even when the codebase is
in an invalid state.

[Giacomo Cavalieri](https://github.com/giacomocavalieri) and
[sobolevn](https://github.com/sobolevn)) have improved the compiler to be fault
tolerant for errors relating to analysis of labeled fields in variant patterns,
parsing of private opaque type definitions, and parsing of type names followed
by `()`, further improving the experience of using the Gleam language server.

Thank you both!

## Redundant pattern alias warning

`_ as x` is a valid pattern in Gleam. The `_` means "don't assign any name to
this value", and the `as x` part means "assign the name `x` to this value".

As you can see, this is quite a silly pattern. The alias `as` pattern makes the
discard `_` pattern redundant, and it would always be better to use
the pattern `x`, which means "assign this value to the name x".

```gleam
// Redundant
let _ as x = something()

// Recommended
let x = something()
```

Using an alias pattern with a discard pattern has been deprecated, and the
Gleam code formatter will rewrite any instances of it to the recommended syntax.

Thank you [eutampieri](https://github.com/eutampieri) for this!

## More inefficient list check warnings

Gleam's basic sequence type is an immutable linked list with structural
sharing, a data type inherited from Erlang and one common in functional
programming languages.

The correct way to check if a list is empty is to pattern match on it with the
empty-list pattern, or to compare it to an empty list literal.

```gleam
pub fn both_empty(list1: List(a), list2: List(b)) -> Bool {
  // Pattern matching approach.
  // More verbose, but can be part of a larger pattern match.
  let list1_empty = case list1 {
    [] -> True
    _ -> False
  }

  // Comparison approach.
  let list2_empty = list2 == []

  list1_empty && list2_empty
}
```

The standard library's `list.length` function returns the length of a given
list. Gleam and Erlang lists don't store the length on them as a static
property, so this function has to traverse the full list, and count the number
of elements, making it a very wasteful way to determine if a list is empty.

This behaviour may be suprising to programmers familiar with languages with a
different core sequence data type, so they might not realise this is not a good
way to check for an empty list. To remove this confusion the compiler would
emit a warning for code like `list.length(items) == 0`, informing the
programmer of better alternatives.

With this release the warning will also be emitted for more inefficient use of
`list.length`, including checks for non-empty lists using operators like `>`
and `<`.

``` =html
<pre><code><b><span class="code-warning">warning</span>: Inefficient use of <code>`list.length`</code></b>
<span class="code-decoration">  ┌─</span> /data/data/com.termux/files/home/test_gleam/src/test_gleam.gleam:5:13
<span class="code-decoration">  │</span>
<span class="code-decoration">5 │</span>     let _ = <span class="code-warning">0 &lt; list.length(numbers)</span>
<span class="code-decoration">  │</span>             <span class="code-warning">^^^^^^^^^^^^^^^^^^^^^^^</span>

The <code>`list.length`</code> function has to iterate across the whole
list to calculate the length, which is wasteful if you only
need to know if the list is empty or not.

Hint: You can use <code>`the_list != []`</code> instead.
</code></pre>
```

Thank you [Andrey Kozhev](https://github.com/ankddev)!

## A helpful syntax error for JavaScripters

In Gleam names are assigned to values within functions using the `let` keyword.
There is a `const` keyword too, but it is used to declare module-level
constants, and it is a syntax error to use it within functions.

The compiler now provides an helpful error message for any programmers
accustomed to languages where `const` is used within functions, such as
JavaScript.

```gleam
pub fn deep_thought() -> Int {
  const the_answer = 42
  the_answer
}
```
``` =html
<pre><code><b><span class="code-error">error</span>: Syntax error</b>
<span class="code-decoration">  ┌─</span> /src/file.gleam:2:3
<span class="code-decoration">  │</span>
<span class="code-decoration">3 │</span>   <span class="code-error">const</span> the_answer = 43
<span class="code-decoration">  │</span>   <span class="code-error">^^^^^ Constants are not allowed inside functions</span>

All variables are immutable in Gleam, so constants inside functions are not
necessary.
Hint: Either move this into the global scope or use <code>`let`</code> binding instead.
</code></pre>
```

Thank you [Surya Rose](https://github.com/GearsDatapacks)!

## A helpful error for Rustaceans, C#ers, and friends

Gleam has a consistent syntax for constructors at the type and value level,
using `()` for both. It does not use `()` for value constructors and `<>` for
type constructors, as is common in some other languages.

To help folks coming from other languages a set of helpful errors have been
added for when they try to use this non-Gleam syntax in their Gleam code.

``` =html
<pre><code><b><span class="code-error">error</span>: Syntax error</b>
<span class="code-decoration">  ┌─</span> /src/parse/error.gleam:2:12
<span class="code-decoration">  │</span>
<span class="code-decoration">2 │</span> type Either&lt;a, b&gt; {
<span class="code-decoration">  │</span>            <span class="code-error">^ I was expecting `(` here.</span>

Type parameters use lowercase names and are surrounded by parentheses.

    type Either(a, b) {

See: <a href="https://tour.gleam.run/data-types/generic-custom-types/">https://tour.gleam.run/data-types/generic-custom-types/</a>
</code></pre>
```

Notice how the error message includes the correct syntax for the specific code
that the programmer has written. The programmer could copy/paste the correct
version into their code, if they so desired. A link to the documentation is
also provided, linking to whichever feature the syntax error is for.

Thank you [Aaron Christiansen](https://github.com/AaronC81)!

## A helpful syntax error for Pythonistas, Elixirists, and friends

Similar to the last two new error messages, there's now a helpful error message
for programmers trying to use `#` instead of `//` to write a comment. Thank you
[sobolevn](https://github.com/sobolevn)!

## Displaying dependency version information

Gleam's built tool integrates with Hex, the package management system and
primary package repository for the BEAM ecosystem. Gleam implements dependency
version locking to ensure that builds are deterministic, and to prevent
unaudited code from unexpectedly becoming part of your application. Dependency
code is just as much of a risk and responsibility as code directly written by
the programmer, so it must be treated with create care and consideration.

The only time the build tool will select new versions of dependency packages is
if the programmer adds or removes a dependency, if the programmer changes the
package's dependency version requirements, or if the programmer requests the
dependency versions be upgraded using the `gleam update` command.

In these cases when dependencies are changed, added, or removed the build tool
will now print the changes, to help the programmer understand and go on to
audit the new code.

``` =html
<pre><code><span class="code-comment">$ gleam add lustre</span>
<span class="code-operator">  Resolving</span> versions
<span class="code-operator">Downloading</span> packages
<span class="code-operator"> Downloaded</span> 3 packages in 0.04s
<span class="code-operator">      Added</span> gleam_json v3.0.2
<span class="code-operator">      Added</span> houdini v1.2.0
<span class="code-operator">      Added</span> lustre v5.3.5
</code></pre>
```

## `hex owner transfer`

The `hex owner transfer` command has been added to the build tool, allowing
Gleam programmers to transfer ownership of existing Hex packages to another
account. Thank you [Giacomo Cavalieri](https://github.com/giacomocavalieri)!

## Improved type displaying

When a Gleam package is published to Hex HTML documentation is generated and
published to the HexDocs documentation hosting website. This documentation has
now been improved to now print the names of public type aliases instead of
internal type names when annotating functions and types. This makes the
documentation more likely to use the APIs that the package author intends for
their users.

For example, for the following code:

```gleam
import my_package/internal

pub type ExternalAlias = internal.InternalRepresentation

pub fn do_thing() -> ExternalAlias { ... }
```

This is what the build tool used to generate:

```gleam
pub fn do_thing() -> @internal InternalRepresentation
```

This is technically correct, but not very useful for the reader of the
documentation, as they cannot learn anything about these internal types.
Now it will not use the internal name, allowing the programmer to click-through
to its documentation, and understand how they should refer to this type in
their code.

```gleam
pub fn do_thing() -> ExternalAlias
```

This improvement also applies to the language server, both in information
displayed on hover, and in code actions such as "add annotations".

```gleam
import lustre/html
import lustre/element
import lustre/attribute

pub fn make_link(attribute, element) {
  html.a([attribute], [elements])
}
```

If the "add annotations" code action is run on this function the language
server will identify that the imported `lustre/attribute` module has public
export of the `Attribute` type, and that the imported `lustre/element` module
has public export of the `Element` type, so they will both be used instead of
the internal definition.

```gleam
pub fn make_link(
  attribute: attribute.Attribute,
  element: element.Element(a)
) -> element.Element(a) {
   html.a([attribute], [elements])
}
```

Thank you [Surya Rose](https://github.com/GearsDatapacks)!

## Improved type naming in code actions

Another way in which code actions need to consider type names is with type
parameters. The "add type annotations" and "generate function" code actions
must find names for any type variables that do not clash with any already in
use. Previously the language server would track names in-use at the module
level which could result in correct but unexpected names being used.

Take this code, for example.

```gleam
fn something(a: a, b: b, c: c) -> d { todo }

fn pair(a, b) { #(a, b) }
```

Previously, when triggering the "Add type annotations" code action on the
`pair` function, the language server would have used these names:

```gleam
fn pair(a: e, b: f) -> #(e, f) { #(a, b) }
```

However in 1.13, it will now use these names:

```gleam
fn pair(a: a, b: b) -> #(a, b) { #(a, b) }
```

Thank you [Surya Rose](https://github.com/GearsDatapacks)!


## Tangled support

[Tangled](https://tangled.org/) is a new open source source forge, and the Gleam
build tool now has support for it. When specified the HTML documentation will
include links to the source code definitions for each type and value in the
package, as it would for previously supported source forges such as GitHub and
Forgejo.

```toml
repository = { type = "tangled", user = "me", repo = "my_project" }
```

Thank you to [Naomi Roberts](https://github.com/naomieow) for this. As part of
this work she added support for links to multi-line sections of code in Tangled
itself!

## Further language server support

The language server was missing support for a few syntaxes, this has now been
fixed. You can now go to definition, rename, etc. from alternative patterns in
case expressions:

```gleam
case wibble {
  Wibble | Wobble -> 0
  //         ^- Previously you could not trigger actions from here
}

```

And hovering over a record field in a record access expression will now show
the documentation for that field, if any exists.

Thank you [Surya Rose](https://github.com/GearsDatapacks) and
[fruno](https://github.com/fruno-bulax)!

## Remove unreachable clauses code action

# TODO: add to documentation

Gleam's pattern matching analysis can identify any clauses of a case
expression are unreachable due to previous patterns already matching any values
the redundant one could match.

```gleam
pub fn main() {
  case find_user() {
    Ok(person) -> todo
    Ok(Admin) -> todo
    Ok(User) -> todo
    Error(_) -> todo
  }
}
```

Here the `Ok(Admin)` and `Ok(User)` patterns could never match as all the `Ok`
values would be instead matched by the earlier `Ok(person)` pattern.

This is clearly a mistake in the code, so the compiler will emit a warning and
highlight the unreachable clauses. Most commonly the programmer will want to
edit the patterns to correct them, but some times the clauses are no longer
needed, and can be deleted entirely. To help with this scenario the language
server now offers a quick-fix code action to delete any redundant clauses.

Triggering it on the above code will result in the code being edited like so:


```gleam
pub fn main() {
  case find_user() {
    Ok(person) -> todo
    Error(_) -> todo
  }
}
```

Thank you [Giacomo Cavalieri](https://github.com/giacomocavalieri)!

## Pattern match on value code action improvements

Gleam has a single flow-control feature: pattern matching with the `case`
expression. Because of this there's a lot of pattern matching in Gleam
programs! The language server offers a code action to quickly pattern match on
a focused value, and with this release it has been further improved.

It can now be triggered on lists, with the default clauses including one for
when the list is empty, and one for when it is non-empty.

```gleam
pub fn is_empty(list: List(a)) -> Bool {
  //            ^^^^ Triggering the action here
}
```

Triggering the action over the `list` argument would result in the following
code:

```gleam
pub fn is_empty(list: List(a)) -> Bool {
  case list {
    [] -> todo
    [first, ..rest] -> todo
  }
}
```

The code action can now be triggered on variables introduced by other patterns.
For example, here we have a `let` statement with a pattern defining the
variables `name` and `role`.

```gleam
pub fn main() {
  let User(name:, role:) = find_user("lucy")
  //              ^^^^ Triggering the action here
}
```

Triggering the action on `role` results in a case expression being inserted on
the line below, with a clause for each of the possible variants of the `Role`
type that variable held.

```gleam
pub fn main() {
  let User(name:, role:) = find_user("lucy")
  case role {
    Admin -> todo
    Member -> todo
  }
}
```

If the variable was introduced within a case expression already then the
behaviour is different. For example:

```gleam
pub fn main() {
  case find_user() {
    Ok(user) -> todo
    Error(_) -> todo
  }
}
```

Triggering the code action on the `user` variable would cause the code to be
rewritten to expand that clause of the case expression, replacing it with one
specialised clause for each of the possible variants of the type of that
variable.

```gleam
pub fn main() {
  case find_user() {
    Ok(Admin) -> todo
    Ok(Member) -> todo
    Error(_) -> todo
  }
}
```

Thank you [Giacomo Cavalieri](https://github.com/giacomocavalieri)! Pattern
matching is such a important core feature of Gleam that these improvements make
a big difference to the experience of writing and editing Gleam code.

## Collapse nested case expression code action

# TODO: add to documentation

Another new code action is one to collapse nested case expressions into one,
reducing nesting and enabling further optimisations in some situations.

```gleam
case user {
  User(name:) ->
    case name {
      "Joe" -> "Hello, Joe!"
      _ -> "Hello there!"
    }
  Guest -> "You're not logged in!"
}
```

Triggering the code action on the first clause will result in it being replaced
by multiple clauses that produce the same behaviour as the nested version.

```gleam
case user {
  User(name: "Joe") -> "Hello, Joe!"
  User(name: _) -> "Hello there!"
  Guest -> "You're not logged in!"
}
```

Thank you [Giacomo Cavalieri](https://github.com/giacomocavalieri)!


## Add omitted labels code action

# TODO: add to documentation

Function parameters and record fields can have labels, names that can be used
at the call-site to make it clearer what each argument is, and to make the
ordering of the arguments not matter. The language server now offers a code
action to add the omitted labels in a call. For example:

```gleam
pub type User {
  User(first_name: String, last_name: String, likes: List(String))
}

pub fn main() {
  let first_name = "Giacomo"
  User(first_name, "Cavalieri", ["gleam"])
}
```

Triggering the code action on the `User` constructor will result in the
language server adding the labels to the arguments.

```gleam
pub type User {
  User(first_name: String, last_name: String, likes: List(String))
}

pub fn main() {
  let first_name = "Giacomo"
  User(first_name:, last_name: "Cavalieri", likes: ["gleam"])
}
```

## Inter-module generate function code action

The "Generate function" code action now works when the missing function is to
be defined in another module. For example:

```gleam
// src/maths.gleam
pub fn add(a: Int, b: Int) -> Int { a + b }
```

```gleam
// src/app.gleam
import maths

pub fn main() -> Nil {
  echo maths.add(1, 2)
  echo maths.subtract(2, 1)
  Nil
}
```

The `app` module is calling a function called `subtract` from the `maths`
module, but that function doesn't exist. Triggering the code action on the call
to `maths.subtract` will edit the `maths.gleam` file to add the outline of the
function, for the programmer to complete.

```gleam
pub fn add(a: Int, b: Int) -> Int { a + b }

pub fn subtract(int: Int, int_2: Int) -> Int {
  todo
}
```

Thank you [Surya Rose](https://github.com/GearsDatapacks)! This is nice little
quality-of-life improvement for Gleam programmers.

## Extract function code action

And the last code action of this release, one that has been eagerly anticipated
for some time by many Gleam programmers: extract function.

```gleam
const head_byte_count = 256

pub fn get_head_of_file() {
  let assert Ok(contents) = read_file()
  case contents {
    <<head:bytes-size(head_byte_count), _:bits>> -> Ok(head)
    _ -> Error(Nil)
  }
}
```

If you were to select the case expression in your editor and trigger the code
action, then it would be extracted to a new function, like so:

```gleam
const head_byte_count = 256

pub fn get_head_of_file() {
  let assert Ok(contents) = read_file()
  function(contents)
}

fn function(contents: BitArray) -> Result(BitArray, Nil) {
  case contents {
    <<head:bytes-size(head_byte_count), _:bits>> -> Ok(head)
    _ -> Error(Nil)
  }
}
```

Unfortunately the language server protocol design is rather limiting, so the
Gleam language server cannot prompt the programmer for a suitable name, it has
to use a meaningless name instead. The "rename" feature of the language server
can be triggered to give it a more appropriate name.

I believe that Microsoft's rewrite of the TypeScript toolchain will include it
using the language server protocol instead of their custom protocol, so
hopefully this will result in them expanding the LSP specification to include
features their custom protocol has, such as code actions being able to ask for
more information.

Thank you again [Surya Rose](https://github.com/GearsDatapacks)!

## Formatter improvements

Gleam has a code formatter that can clean up a file of Gleam code in an
instant, freeing up time that would be otherwise spent on the busy-work of
manually laying out code. Typically it is run by the programmer's text editor
when a file is saved. Several improvements have been made to it with this
release.

Bools can be negated with the `!` operator, and ints can be negated with the
`-` operator. Negating a value multiple times is redundant and does nothing, so
the formatter now collapses duplicate negations.

```gleam
pub fn useless_negations() {
  let lucky_number = --11
  let lucy_is_a_star = !!!False
}
```

The code is rewritten like so:

```gleam
pub fn useless_negations() {
  let lucky_number = 11
  let lucy_is_a_star = !False
}
```

Additionally, the formatter no longer removes blocks from case clause guards,
as the programmer may wish to include them to make code clearer, even if they
are not required according to Gleam's operator precedency rules. This also
makes the behaviour consistent with the formatting of regular expressions in
Gleam functions.

Thank you [Giacomo Cavalieri](https://github.com/giacomocavalieri)!

## And the rest

And thank you to the bug fixers and experience polishers:
[Andrey Kozhev](https://github.com/ankddev),
[Benjamin Peinhardt](https://github.com/bcpeinhardt),
[Danielle Maywood](https://github.com/DanielleMaywood),
[fruno](https://github.com/frunobulax-the-poodle),
[Giacomo Cavalieri](https://github.com/giacomocavalieri),
[Joohoon Cha](https://github.com/jcha0713),
[Matias Carlander](https://github.com/matiascr),
[Surya Rose](https://github.com/GearsDatapacks), and
[Tristan-Mihai Radulescu](https://github.com/Courtcircuits)).

For full details of the many fixes and improvements they've implemented see [the
changelog][changelog].

[changelog]: https://github.com/gleam-lang/gleam/blob/main/changelog/v1.13.md

## A call for support

Gleam is not owned by a corporation; instead it is entirely supported by
sponsors, most of which contribute between $5 and $20 USD per month, and Gleam
is my sole source of income.

We have made great progress towards our goal of being able to appropriately pay
the core team members, but we still have further to go. Please consider
supporting [the project][sponsor] or core team members
[Giacomo Cavalieri](https://github.com/sponsors/giacomocavalieri) and
[Surya Rose](https://github.com/sponsors/GearsDatapacks)
on GitHub Sponsors.

``` =html
<a class="sponsor-level0" href="https://github.com/sponsors/lpil" rel="noopener" target="_blank">
  <img src="/images/community/github.svg" alt="GitHub Sponsors" style="filter: invert(1)"/>
</a>
```

[sponsor]: https://github.com/sponsors/lpil

Thank you to all our sponsors! And special thanks to our top sponsors:

``` =html
<ul class="top-sponsors">
  <li>
    <a class="sponsor-level1" href="https://lambdaclass.com/" rel="noopener" target="_blank" >
      <img src="/images/sponsors/lambda-class-white.png" alt="Lambda Class">
    </a>
  </li>
  <li>
    <a class="sponsor-level2" href="https://williamsandholmes.com" rel="noopener" target="_blank">
      <img alt="Williams &amp; Holmes" src="/images/sponsors/williamsandholmes.svg">
    </a>
  </li>
</ul>
```

- [0riginaln0](https://github.com/0riginaln0)
- [Aaron Christiansen](https://github.com/AaronC81)
- [Aaron Gunderson](https://github.com/agundy)
- [Abel Jimenez](https://github.com/abeljim)
- [abs0luty](https://github.com/abs0luty)
- [ad-ops](https://github.com/ad-ops)
- [Adam Brodzinski](https://github.com/AdamBrodzinski)
- [Adam Johnston](https://github.com/adjohnston)
- [Adam Shannon](https://github.com/adamdecaf)
- [Adam Wyłuda](https://github.com/adam-wyluda)
- [Adi Iyengar](https://github.com/thebugcatcher)
- [Adrian Mouat](https://github.com/amouat)
- [Ajit Krishna](https://github.com/JitPackJoyride)
- [Aleksei Gurianov](https://github.com/Guria)
- [Alembic](https://alembic.com.au)
- [Alex Houseago](https://github.com/ahouseago)
- [Alex Manning](https://github.com/rawhat)
- [Alexander Stensrud](https://github.com/muonoum)
- [Alexandre Del Vecchio](https://github.com/defgenx)
- [Ameen Radwan](https://github.com/Acepie)
- [Andrea Bueide](https://github.com/abueide)
- [Andrew Ivchenkov](https://github.com/aivchen)
- [Andrey](https://github.com/ankddev)
- [André Mazoni](https://github.com/andremw)
- [Andy Young](https://github.com/ayoung19)
- [Antharuu](https://github.com/antharuu)
- [Anthony Khong](https://github.com/anthony-khong)
- [Anthony Maxwell](https://github.com/Illbjorn)
- [Anthony Scotti](https://github.com/amscotti)
- [Arya Irani](https://github.com/aryairani)
- [Austin Beau Bodzas](https://github.com/Beaudidly)
- [Azure Flash](https://github.com/azureflash)
- [Barry Moore II](https://github.com/chiroptical)
- [Ben Martin](https://github.com/requestben)
- [Ben Marx](https://github.com/bgmarx)
- [Ben Myles](https://github.com/benmyles)
- [benev0](https://github.com/benev0)
- [Benjamin](https://github.com/bcpeinhardt)
- [Benjamin Kane](https://github.com/bbkane)
- [Benjamin Moss](https://github.com/drteeth)
- [bgw](https://github.com/bgwdotdev)
- [Billuc](https://github.com/Billuc)
- [Bjarte Aarmo Lund](https://github.com/bjartelund)
- [Bjoern Paschen](https://github.com/00bpa)
- [bondiano](https://github.com/bondiano)
- [Brad Mehder](https://github.com/bmehder)
- [Brett Kolodny](https://github.com/brettkolodny)
- [Brian Dawn](https://github.com/brian-dawn)
- [Brian Dukes](https://github.com/bdukes)
- [Brian Glusman](https://github.com/bglusman)
- [Bruce Williams](https://github.com/bruce)
- [Bruno Michel](https://github.com/nono)
- [bucsi](https://github.com/bucsi)
- [Cam Ray](https://github.com/camray)
- [Cameron Presley](https://github.com/cameronpresley)
- [Carlo Munguia](https://github.com/carlomunguia)
- [Carlos Saltos](https://github.com/csaltos)
- [Cassidy Spring (Bee)](https://github.com/beeauvin)
- [Chad Selph](https://github.com/chadselph)
- [Charlie Govea](https://github.com/charlie-n01r)
- [Chengjun Xie](https://github.com/madper)
- [Chew Choon Keat](https://github.com/choonkeat)
- [Chris Donnelly](https://github.com/ceedon)
- [Chris King](https://github.com/Morzaram)
- [Chris Lloyd](https://github.com/chrislloyd)
- [Chris Ohk](https://github.com/utilForever)
- [Chris Rybicki](https://github.com/Chriscbr)
- [Chris Vincent](https://github.com/cvincent)
- [Christopher David Shirk](https://github.com/christophershirk)
- [Christopher De Vries](https://github.com/devries)
- [Christopher Dieringer](https://github.com/cdaringe)
- [Christopher Jung](https://github.com/christopherhjung)
- [Christopher Keele](https://github.com/christhekeele)
- [CJ Salem](https://github.com/specialblend)
- [Clifford Anderson](https://github.com/CliffordAnderson)
- [Coder](https://github.com/coder)
- [Cole Lawrence](https://github.com/colelawrence)
- [Comamoca](https://github.com/Comamoca)
- [Comet](https://github.com/comet-ml)
- [Constantin (Cleo) Winkler](https://github.com/Lucostus)
- [Corentin J.](https://github.com/jcorentin)
- [Courtcircuits](https://github.com/Courtcircuits)
- [Cris Holm](https://github.com/uberguy)
- [Damir Vandic](https://github.com/dvic)
- [Dan](https://github.com/d2718)
- [Dan Dresselhaus](https://github.com/ddresselhaus)
- [Dan Gieschen Knutson](https://github.com/Giesch)
- [Dan Strong](https://github.com/strongoose)
- [Daniel Kurz](https://github.com/daniellionel01)
- [Daniel S Jeremiah](https://github.com/Daniel-Shunom)
- [Danielle Maywood](https://github.com/DanielleMaywood)
- [Daniil Nevdah](https://github.com/ndan)
- [Danny Arnold](https://github.com/pinnet)
- [Danny Martini](https://github.com/despairblue)
- [Dave Lucia](https://github.com/davydog187)
- [David Bernheisel](https://github.com/dbernheisel)
- [David Cornu](https://github.com/davidcornu)
- [David Pendray](https://github.com/dpen2000)
- [Dennis Lustre](https://github.com/dlustre)
- [dependabot[bot]](https://github.com/dependabot%5Bbot%5D)
- [Diego](https://github.com/diegogub)
- [Diemo Gebhardt](https://github.com/diemogebhardt)
- [Donnie Flood](https://github.com/floodfx)
- [duzda](https://github.com/duzda)
- [Dylan Anthony](https://github.com/dbanty)
- [Dylan Carlson](https://github.com/gdcrisp)
- [Ed Hinrichsen](https://github.com/edhinrichsen)
- [Ed Rosewright](https://github.com/EdRW)
- [Edon Gashi](https://github.com/edongashi)
- [Eileen Noonan](https://github.com/enoonan)
- [eli](https://github.com/dropwhile)
- [Eli Treuherz](https://github.com/treuherz)
- [Emma](https://github.com/Emma-Fuller)
- [Eric Koslow](https://github.com/ekosz)
- [Erik Terpstra](https://github.com/eterps)
- [erikareads](https://liberapay.com/erikareads/)
- [ErikML](https://github.com/ErikML)
- [erlend-axelsson](https://github.com/erlend-axelsson)
- [Ernesto Malave](https://github.com/oberernst)
- [Ethan Olpin](https://github.com/EthanOlpin)
- [eutampieri](https://github.com/eutampieri)
- [Evaldo Bratti](https://github.com/evaldobratti)
- [Evan Johnson](https://github.com/evanj2357)
- [evanasse](https://github.com/evanasse)
- [Fabrizio Damicelli](https://github.com/fabridamicelli)
- [Falk Pauser](https://github.com/fpauser)
- [Fede Esteban](https://github.com/fmesteban)
- [Felix](https://github.com/yerTools)
- [Fernando Farias](https://github.com/nandofarias)
- [Filip Figiel](https://github.com/ffigiel)
- [Fleey](https://github.com/iFleey)
- [Florian Kraft](https://github.com/floriank)
- [Francis Hamel](https://github.com/francishamel)
- [Francisco Budaszewski Zanatta](https://github.com/xikaos)
- Francisco Budaszewski Zanatta
- [frankwang](https://github.com/Frank-III)
- [fruno](https://github.com/fruno-bulax)
- [G-J van Rooyen](https://github.com/gvrooyen)
- [Gabriel Vincent](https://github.com/gabrielvincent)
- [Gareth Pendleton](https://github.com/pendletong)
- [Gavin Panella](https://github.com/allenap)
- [GearsDatapacks](https://github.com/GearsDatapacks)
- [Geir Arne Hjelle](https://github.com/gahjelle)
- [ggobbe](https://github.com/ggobbe)
- [Giacomo Cavalieri](https://github.com/giacomocavalieri)
- [ginkogruen](https://github.com/ginkogruen)
- [Giovanni Kock Bonetti](https://github.com/giovannibonetti)
- [godalming123](https://github.com/godalming123)
- [Graham](https://github.com/GV14982)
- [Grant Everett](https://github.com/YoyoSaur)
- [graphiteisaac](https://github.com/graphiteisaac)
- [Guilherme de Maio](https://github.com/nirev)
- [Guillaume Heu](https://github.com/guillheu)
- [Guillaume Hivert](https://github.com/ghivert)
- [Hammad Javed](https://github.com/hammad-r-javed)
- [Hannes Nevalainen](https://github.com/kwando)
- [Hannes Schnaitter](https://github.com/ildorn)
- [Hans Raaf](https://github.com/oderwat)
- [Hayleigh Thompson](https://github.com/hayleigh-dot-dev)
- [Hazel Bachrach](https://github.com/hibachrach)
- [Henning Dahlheim](https://github.com/hdahlheim)
- [Henrik Tudborg](https://github.com/tudborg)
- [Henry Warren](https://github.com/henrysdev)
- [Hizuru3](https://liberapay.com/Hizuru3/)
- [Hubert Małkowski](https://github.com/hubertmalkowski)
- [Iain H](https://github.com/iainh)
- [Ian González](https://github.com/Ian-GL)
- [Ian M. Jones](https://github.com/ianmjones)
- [Igor Montagner](https://github.com/igordsm)
- [imlargo](https://github.com/imlargo)
- [inoas](https://github.com/inoas)
- [Isaac Harris-Holt](https://github.com/isaacharrisholt)
- [Isaac McQueen](https://github.com/imcquee)
- [Ivar Vong](https://github.com/ivarvong)
- [Jachin Rupe](https://github.com/jachin)
- [Jacob Lamb](https://github.com/jacobdalamb)
- [Jake Cleary](https://github.com/jakecleary)
- [Jake Wood](https://github.com/jzwood)
- [James Birtles](https://github.com/jamesbirtles)
- [James MacAulay](https://github.com/jamesmacaulay)
- [Jan Pieper](https://github.com/janpieper)
- [Jan Skriver Sørensen](https://github.com/monzool)
- [jcha0713](https://github.com/jcha0713)
- [Jean Niklas L'orange](https://github.com/hypirion)
- [Jean-Adrien Ducastaing](https://github.com/MightyGoldenOctopus)
- [Jean-Luc Geering](https://github.com/jlgeering)
- [Jean-Marc QUERE](https://github.com/jihem)
- [Jen Stehlik](https://github.com/okkdev)
- [Jerred Shepherd](https://github.com/shepherdjerred)
- [Jesse Cooke](https://github.com/jc00ke)
- [Jimpjorps™](https://github.com/hunkyjimpjorps)
- [Joey Kilpatrick](https://github.com/joeykilpatrick)
- [Joey Trapp](https://github.com/joeytrapp)
- [Johan Strand](https://github.com/johan-st)
- [John Björk](https://github.com/JohnBjrk)
- [JOHN STEINBERGER](https://github.com/vistuleB)
- [John Strunk](https://github.com/jrstrunk)
- [Jojor](https://github.com/xjojorx)
- [Jon Charter](https://github.com/jmcharter)
- [Jon Lambert](https://github.com/jonlambert)
- [Jonas E. P](https://github.com/igern)
- [Jonas Hedman Engström](https://github.com/JonasHedEng)
- [jooaf](https://github.com/jooaf)
- [Joseph Lozano](https://github.com/joseph-lozano)
- [Joseph Myers](https://github.com/BigJayToDaIzo)
- [Joseph T. Lyons](https://github.com/JosephTLyons)
- [Joshua Steele](https://github.com/joshocalico)
- [Julian Hirn](https://github.com/nineluj)
- [Julian Lukwata](https://liberapay.com/d2quadra/)
- [Julian Schurhammer](https://github.com/schurhammer)
- [Justin Lubin](https://github.com/justinlubin)
- [justisCrocker](https://github.com/justisCrocker)
- [Jérôme Schaeffer](https://github.com/Neofox)
- [Jørgen Andersen](https://github.com/jorg1piano)
- [Kadei](https://github.com/kadei-rat)
- [KamilaP](https://github.com/Kamila-P)
- [Kemp Brinson](https://github.com/jkbrinso)
- [Kero van Gelder](https://github.com/keroami)
- [Kevin Schweikert](https://github.com/kevinschweikert)
- [khalidbelk](https://github.com/khalidbelk)
- [Kristoffer Grönlund](https://github.com/krig)
- [Kritsada Sunthornwutthikrai](https://github.com/Bearfinn)
- [Krzysztof Gasienica-Bednarz](https://github.com/krzysztofgb)
- [Kuma Taro](https://github.com/km-tr)
- [Landon](https://github.com/jly36963)
- [lazno](https://github.com/lazno)
- [Leah Ulmschneider](https://github.com/leah-u)
- [Leandro Ostera](https://github.com/leostera)
- [Lee Jarvis](https://github.com/leejarvis)
- [Lennon Day-Reynolds](https://github.com/rcoder)
- [Leon Qadirie](https://github.com/leonqadirie)
- [Leonardo Donelli](https://github.com/LeartS)
- [Lexx](https://github.com/lexx27)
- [lidashuang](https://github.com/defp)
- [linqingmo](https://github.com/linqingmo)
- [Lukas Bjarre](https://github.com/lbjarre)
- [Luke Amdor](https://github.com/lamdor)
- [Luna](https://github.com/2kool4idkwhat)
- [Manuel Rubio](https://github.com/manuel-rubio)
- [marcus](https://github.com/carlinigraphy)
- [Mario Vellandi](https://github.com/mvellandi)
- [Marius Kalvø](https://github.com/mariuskalvo)
- [Mark Dodwell](https://github.com/mkdynamic)
- [Mark Holmes](https://github.com/markholmes)
- [Mark Markaryan](https://github.com/markmark206)
- [Mark Rudolph](https://github.com/alterationx10)
- [Marshall Bowers](https://github.com/maxdeviant)
- [Martin Janiczek](https://github.com/Janiczek)
- [Martin Poelstra](https://github.com/poelstra)
- [Martin Rechsteiner ](https://github.com/rechsteiner)
- [matiascr](https://github.com/matiascr)
- [Matt Heise](https://github.com/mhheise)
- [Matt Mullenweg](https://github.com/m)
- [Matt Savoia](https://github.com/matt-savvy)
- [Matt Van Horn](https://github.com/mattvanhorn)
- [Matthew Jackson](https://github.com/matthewj-dev)
- [Matthew Whitworth](https://github.com/mwhitworth)
- [Max McDonnell](https://github.com/maxmcd)
- [Maxim Philippov](https://github.com/phmx)
- [metame](https://github.com/metame)
- [METATEXX GmbH](https://github.com/metatexx)
- [Metin Emiroğlu](https://github.com/amiroff)
- [Michael Duffy](https://github.com/stunthamster)
- [Michael Jones](https://github.com/michaeljones)
- [Michael Mazurczak](https://github.com/monocursive)
- [Michal Timko](https://github.com/tymak)
- [Mikael Karlsson](https://github.com/karlsson)
- [Mike Roach](https://github.com/mroach)
- [Mikey J](https://liberapay.com/mikej/)
- [MoeDev](https://github.com/MoeDevelops)
- [MzRyuKa](https://github.com/rykawamu)
- [n8n - Workflow Automation](https://github.com/n8nio)
- [Naomi Roberts](https://github.com/naomieow)
- [Natalie Rose](https://github.com/nataliethistime)
- [Natanael Sirqueira](https://github.com/natanaelsirqueira)
- [Nathaniel Knight](https://github.com/nathanielknight)
- [Nguyễn Hồng Quân](https://github.com/hongquan)
- [Nick Chapman](https://github.com/nchapman)
- [Nicklas Sindlev Andersen](https://github.com/NicklasXYZ)
- [NicoVIII](https://github.com/NicoVIII)
- [Niket Shah](https://github.com/mrniket)
- [Nikolai Steen Kjosnes](https://github.com/blink1415)
- [Ninaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa](https://github.com/ninanomenon)
- [NineFX](http://www.ninefx.com)
- [Noah Betzen](https://github.com/Nezteb)
- [Nomio](https://github.com/nomio)
- [nunulk](https://github.com/nunulk)
- [Ocean](https://github.com/oceanlewis)
- [Olaf Sebelin](https://github.com/osebelin)
- [OldhamMade](https://github.com/OldhamMade)
- [Oliver Medhurst](https://github.com/CanadaHonk)
- [Oliver Tosky](https://github.com/otosky)
- [ollie](https://github.com/nnuuvv)
- [optizio](https://github.com/optizio)
- [Patrick Wheeler](https://github.com/Davorak)
- [Pattadon Sa-ngasri](https://github.com/tamectosphere)
- [Paul Guse](https://github.com/pguse)
- [Pedro Correa](https://github.com/Tulkdan)
- [peonynopes](https://github.com/peonynopes)
- [Pete Jodo](https://github.com/petejodo)
- [Peter Rice](https://github.com/pvsr)
- [Philpax](https://github.com/philpax)
- [Pierre Rouleau](https://github.com/pierre-rouleau)
- [Qdentity](https://github.com/qdentity)
- [Quentin BETTOUM](https://github.com/quentin-bettoum)
- [Race Williams](https://github.com/raquentin)
- [raineycat](https://github.com/raineycat)
- [Rasmus](https://github.com/stoft)
- [Raúl Chouza ](https://github.com/chouzar)
- [Redmar Kerkhoff](https://github.com/redmar)
- [Reilly Tucker Siemens](https://github.com/reillysiemens)
- [Renata Amutio Herrero](https://github.com/renatillas)
- [Renato Massaro](https://github.com/renatomassaro)
- [Renovator](https://github.com/renovatorruler)
- [Richard Viney](https://github.com/richard-viney)
- [Rico Leuthold](https://github.com/rico)
- [Rintaro Okamura](https://github.com/rinx)
- [Ripta Pasay](https://github.com/ripta)
- [Robert Attard](https://github.com/TanklesXL)
- [Robert Ellen](https://github.com/rellen)
- [Robert Malko](https://github.com/malkomalko)
- [Rodrigo Álvarez](https://github.com/Papipo)
- [Rotabull](https://github.com/rotabull)
- [Rupus Reinefjord](https://github.com/reinefjord)
- [Ruslan Ustitc](https://github.com/ustitc)
- [Russell Clarey](https://github.com/rclarey)
- [Sakari Bergen](https://github.com/sbergen)
- [Sam Aaron](https://github.com/samaaron)
- [Sam Zanca](https://github.com/metruzanca)
- [sambit](https://github.com/soulsam480)
- [Sammy Isseyegh](https://github.com/bkspace)
- [Samu](https://github.com/scristobal)
- [Savva](https://github.com/castletaste)
- [Saša Jurić](https://github.com/sasa1977)
- [Scott Trinh](https://github.com/scotttrinh)
- [Scott Wey](https://github.com/scottwey)
- [Scott Zhu Reeves](https://github.com/star-szr)
- [Sean Cribbs](https://github.com/seancribbs)
- [Sean Roberts](https://github.com/SeanRoberts)
- [Sebastian Porto](https://github.com/sporto)
- [Seve Salazar](https://github.com/tehprofessor)
- [Sgregory42](https://github.com/Sgregory42)
- [Shane Poppleton](https://github.com/codemonkey76)
- [Shawn Drape](https://github.com/shawndrape)
- [Shritesh Bhattarai](https://github.com/shritesh)
- [Sigma](https://github.com/sigmasternchen)
- [simone](https://github.com/simonewebdesign)
- [sobolevn](https://github.com/sobolevn)
- [Stefan](https://github.com/bytesource)
- [Stefan Hagen](https://github.com/sthagen)
- [Steinar Eliassen](https://github.com/steinareliassen)
- [Stephen Belanger](https://github.com/Qard)
- [Strandinator](https://github.com/Strandinator)
- [Sławomir Ehlert](https://github.com/slafs)
- [TA](https://github.com/betabrain)
- [Theo Harris](https://github.com/Theosaurus-Rex)
- [Thomas](https://github.com/thomaswhyyou)
- [Thomas Coopman](https://github.com/tcoopman)
- [Thomas Crescenzi](https://github.com/trescenzi)
- [Tim Brown](https://github.com/tmbrwn)
- [Timo Sulg](https://github.com/timgluz)
- [Tom Hughes](https://github.com/tomalexhughes)
- [Tom Schuster](https://github.com/tomjschuster)
- [Tomasz Kowal](https://github.com/tomekowal)
- [tommaisey](https://github.com/tommaisey)
- [Tristan de Cacqueray](https://github.com/TristanCacqueray)
- [Tristan Sloughter](https://github.com/tsloughter)
- [Tudor Luca](https://github.com/tudorluca)
- [upsidedowncake](https://github.com/upsidedownsweetfood)
- [Valerio Viperino](https://github.com/vvzen)
- [Viv Verner](https://github.com/PerpetualPossum)
- [Volker Rabe](https://github.com/yelps)
- [vshakitskiy](https://github.com/vshakitskiy)
- [Walton Hoops](https://github.com/Whoops)
- [Weizheng Liu](https://github.com/weizhliu)
- [Willyboar](https://github.com/Willyboar)
- [Wilson Silva](https://github.com/wilsonsilva)
- [wingdeans](https://github.com/wingdeans)
- [yagogarea](https://github.com/yagogarea)
- [Yamen Sader](https://github.com/yamen)
- [Yasuo Higano](https://github.com/Yasuo-Higano)
- [yoshie ](https://github.com/yoshi-monster)
- [zenconomist](https://github.com/zenconomist)
- [Zsombor Gasparin](https://github.com/gasparinzsombor)
- [ZWubs](https://github.com/zwubs)
- [~1814730](https://liberapay.com/~1814730/)
- [~1847917](https://liberapay.com/~1847917/)
- [~1867501](https://liberapay.com/~1867501/)
- [Éber Freitas Dias](https://github.com/eberfreitas)

``` =html
<div style="text-align: center">
  <a class="button" href="https://tour.gleam.run/">Try Gleam</a>
</div>
```
